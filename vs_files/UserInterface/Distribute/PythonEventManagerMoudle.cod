; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	D:\Metin2\Metin2\client_source_clean\client_source_clean\source\UserInterface\PythonEventManagerMoudle.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BB@CGDFENFO@RegisterEventSet?$AA@	; `string'
PUBLIC	??_C@_0O@JBCNLALP@ClearEventSet?$AA@		; `string'
PUBLIC	??_C@_0BL@MCHCNCJD@RegisterEventSetFromString?$AA@ ; `string'
PUBLIC	??_C@_0BK@FKKDIMJI@GetEventSetLocalYPosition?$AA@ ; `string'
PUBLIC	??_C@_0BD@EKLFHPIO@SetRestrictedCount?$AA@	; `string'
PUBLIC	??_C@_0L@JMOIGJIA@InsertText?$AA@		; `string'
PUBLIC	??_C@_0BK@LPJNLOBK@AddEventSetLocalYPosition?$AA@ ; `string'
PUBLIC	??_C@_0P@LODKOLED@UpdateEventSet?$AA@		; `string'
PUBLIC	??_C@_0BB@MOBCCMCK@InsertTextInline?$AA@	; `string'
PUBLIC	??_C@_0BB@HGJNLEEA@SetEventSetWidth?$AA@	; `string'
PUBLIC	??_C@_0P@MPNMCGPE@RenderEventSet?$AA@		; `string'
PUBLIC	??_C@_06DLEKKAKE@IsWait?$AA@			; `string'
PUBLIC	??_C@_04MCHAEEKC@Skip?$AA@			; `string'
PUBLIC	??_C@_0N@BPMDBAHI@SelectAnswer?$AA@		; `string'
PUBLIC	??_C@_0BA@CNECBPF@EndEventProcess?$AA@		; `string'
PUBLIC	??_C@_0BE@GEBALPNG@GetVisibleStartLine?$AA@	; `string'
PUBLIC	??_C@_0BE@MKDLPPKK@SetVisibleStartLine?$AA@	; `string'
PUBLIC	??_C@_0BD@LLNLKLKO@SetInterfaceWindow?$AA@	; `string'
PUBLIC	??_C@_0BA@PDIIOOGM@SetEventHandler?$AA@		; `string'
PUBLIC	??_C@_0BB@EPFOFEDL@QuestButtonClick?$AA@	; `string'
PUBLIC	??_C@_0BC@JLIPOMMA@SetLeftTimeString?$AA@	; `string'
PUBLIC	??_C@_0BH@NLEPPNKM@BOX_VISIBLE_LINE_COUNT?$AA@	; `string'
PUBLIC	??_C@_05GFHEIIDD@event?$AA@			; `string'
PUBLIC	??_C@_0BB@NGAMENAL@BUTTON_TYPE_DONE?$AA@	; `string'
PUBLIC	??_C@_0BB@LIHDEJBM@BUTTON_TYPE_NEXT?$AA@	; `string'
PUBLIC	??_C@_0BD@BLMCHNOK@BUTTON_TYPE_CANCEL?$AA@	; `string'
;	COMDAT ?s_methods@?1??initEvent@@YAXXZ@4PAUPyMethodDef@@A
_DATA	SEGMENT
?s_methods@?1??initEvent@@YAXXZ@4PAUPyMethodDef@@A DD FLAT:??_C@_0BB@CGDFENFO@RegisterEventSet?$AA@ ; `initEvent'::`2'::s_methods
	DD	FLAT:?eventRegisterEventSet@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BL@MCHCNCJD@RegisterEventSetFromString?$AA@
	DD	FLAT:?eventRegisterEventSetFromString@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0O@JBCNLALP@ClearEventSet?$AA@
	DD	FLAT:?eventClearEventSet@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BD@EKLFHPIO@SetRestrictedCount?$AA@
	DD	FLAT:?eventSetRestrictedCount@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BK@FKKDIMJI@GetEventSetLocalYPosition?$AA@
	DD	FLAT:?eventGetEventSetLocalYPosition@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BK@LPJNLOBK@AddEventSetLocalYPosition?$AA@
	DD	FLAT:?eventAddEventSetLocalYPosition@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0L@JMOIGJIA@InsertText?$AA@
	DD	FLAT:?eventInsertText@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BB@MOBCCMCK@InsertTextInline?$AA@
	DD	FLAT:?eventInsertTextInline@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0P@LODKOLED@UpdateEventSet?$AA@
	DD	FLAT:?eventUpdateEventSet@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0P@MPNMCGPE@RenderEventSet?$AA@
	DD	FLAT:?eventRenderEventSet@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BB@HGJNLEEA@SetEventSetWidth?$AA@
	DD	FLAT:?eventSetEventSetWidth@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_04MCHAEEKC@Skip?$AA@
	DD	FLAT:?eventSkip@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_06DLEKKAKE@IsWait?$AA@
	DD	FLAT:?eventIsWait@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BA@CNECBPF@EndEventProcess?$AA@
	DD	FLAT:?eventEndEventProcess@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0N@BPMDBAHI@SelectAnswer?$AA@
	DD	FLAT:?eventSelectAnswer@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0N@GBIDIHNF@GetLineCount?$AA@
	DD	FLAT:?eventGetLineCount@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BE@MKDLPPKK@SetVisibleStartLine?$AA@
	DD	FLAT:?eventSetVisibleStartLine@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BE@GEBALPNG@GetVisibleStartLine?$AA@
	DD	FLAT:?eventGetVisibleStartLine@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BA@PDIIOOGM@SetEventHandler?$AA@
	DD	FLAT:?eventSetEventHandler@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BD@LLNLKLKO@SetInterfaceWindow?$AA@
	DD	FLAT:?eventSetInterfaceWindow@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BC@JLIPOMMA@SetLeftTimeString?$AA@
	DD	FLAT:?eventSetLeftTimeString@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BB@EPFOFEDL@QuestButtonClick?$AA@
	DD	FLAT:?eventQuestButtonClick@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_07BDCAJABG@Destroy?$AA@
	DD	FLAT:?eventDestroy@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
_DATA	ENDS
;	COMDAT ??_C@_0BD@BLMCHNOK@BUTTON_TYPE_CANCEL?$AA@
CONST	SEGMENT
??_C@_0BD@BLMCHNOK@BUTTON_TYPE_CANCEL?$AA@ DB 'BUTTON_TYPE_CANCEL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@LIHDEJBM@BUTTON_TYPE_NEXT?$AA@
CONST	SEGMENT
??_C@_0BB@LIHDEJBM@BUTTON_TYPE_NEXT?$AA@ DB 'BUTTON_TYPE_NEXT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NGAMENAL@BUTTON_TYPE_DONE?$AA@
CONST	SEGMENT
??_C@_0BB@NGAMENAL@BUTTON_TYPE_DONE?$AA@ DB 'BUTTON_TYPE_DONE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05GFHEIIDD@event?$AA@
CONST	SEGMENT
??_C@_05GFHEIIDD@event?$AA@ DB 'event', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@NLEPPNKM@BOX_VISIBLE_LINE_COUNT?$AA@
CONST	SEGMENT
??_C@_0BH@NLEPPNKM@BOX_VISIBLE_LINE_COUNT?$AA@ DB 'BOX_VISIBLE_LINE_COUNT'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JLIPOMMA@SetLeftTimeString?$AA@
CONST	SEGMENT
??_C@_0BC@JLIPOMMA@SetLeftTimeString?$AA@ DB 'SetLeftTimeString', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EPFOFEDL@QuestButtonClick?$AA@
CONST	SEGMENT
??_C@_0BB@EPFOFEDL@QuestButtonClick?$AA@ DB 'QuestButtonClick', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PDIIOOGM@SetEventHandler?$AA@
CONST	SEGMENT
??_C@_0BA@PDIIOOGM@SetEventHandler?$AA@ DB 'SetEventHandler', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LLNLKLKO@SetInterfaceWindow?$AA@
CONST	SEGMENT
??_C@_0BD@LLNLKLKO@SetInterfaceWindow?$AA@ DB 'SetInterfaceWindow', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@MKDLPPKK@SetVisibleStartLine?$AA@
CONST	SEGMENT
??_C@_0BE@MKDLPPKK@SetVisibleStartLine?$AA@ DB 'SetVisibleStartLine', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GEBALPNG@GetVisibleStartLine?$AA@
CONST	SEGMENT
??_C@_0BE@GEBALPNG@GetVisibleStartLine?$AA@ DB 'GetVisibleStartLine', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CNECBPF@EndEventProcess?$AA@
CONST	SEGMENT
??_C@_0BA@CNECBPF@EndEventProcess?$AA@ DB 'EndEventProcess', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BPMDBAHI@SelectAnswer?$AA@
CONST	SEGMENT
??_C@_0N@BPMDBAHI@SelectAnswer?$AA@ DB 'SelectAnswer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04MCHAEEKC@Skip?$AA@
CONST	SEGMENT
??_C@_04MCHAEEKC@Skip?$AA@ DB 'Skip', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DLEKKAKE@IsWait?$AA@
CONST	SEGMENT
??_C@_06DLEKKAKE@IsWait?$AA@ DB 'IsWait', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MPNMCGPE@RenderEventSet?$AA@
CONST	SEGMENT
??_C@_0P@MPNMCGPE@RenderEventSet?$AA@ DB 'RenderEventSet', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HGJNLEEA@SetEventSetWidth?$AA@
CONST	SEGMENT
??_C@_0BB@HGJNLEEA@SetEventSetWidth?$AA@ DB 'SetEventSetWidth', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MOBCCMCK@InsertTextInline?$AA@
CONST	SEGMENT
??_C@_0BB@MOBCCMCK@InsertTextInline?$AA@ DB 'InsertTextInline', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LODKOLED@UpdateEventSet?$AA@
CONST	SEGMENT
??_C@_0P@LODKOLED@UpdateEventSet?$AA@ DB 'UpdateEventSet', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LPJNLOBK@AddEventSetLocalYPosition?$AA@
CONST	SEGMENT
??_C@_0BK@LPJNLOBK@AddEventSetLocalYPosition?$AA@ DB 'AddEventSetLocalYPo'
	DB	'sition', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JMOIGJIA@InsertText?$AA@
CONST	SEGMENT
??_C@_0L@JMOIGJIA@InsertText?$AA@ DB 'InsertText', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EKLFHPIO@SetRestrictedCount?$AA@
CONST	SEGMENT
??_C@_0BD@EKLFHPIO@SetRestrictedCount?$AA@ DB 'SetRestrictedCount', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FKKDIMJI@GetEventSetLocalYPosition?$AA@
CONST	SEGMENT
??_C@_0BK@FKKDIMJI@GetEventSetLocalYPosition?$AA@ DB 'GetEventSetLocalYPo'
	DB	'sition', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MCHCNCJD@RegisterEventSetFromString?$AA@
CONST	SEGMENT
??_C@_0BL@MCHCNCJD@RegisterEventSetFromString?$AA@ DB 'RegisterEventSetFr'
	DB	'omString', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JBCNLALP@ClearEventSet?$AA@
CONST	SEGMENT
??_C@_0O@JBCNLALP@ClearEventSet?$AA@ DB 'ClearEventSet', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CGDFENFO@RegisterEventSet?$AA@
CONST	SEGMENT
??_C@_0BB@CGDFENFO@RegisterEventSet?$AA@ DB 'RegisterEventSet', 00H ; `string'
PUBLIC	?Instance@?$CSingleton@VCPythonEventManager@@@@SAAAVCPythonEventManager@@XZ ; CSingleton<CPythonEventManager>::Instance
PUBLIC	?initEvent@@YAXXZ				; initEvent
PUBLIC	?eventDestroy@@YAPAU_object@@PAU1@0@Z		; eventDestroy
PUBLIC	?eventSetLeftTimeString@@YAPAU_object@@PAU1@0@Z	; eventSetLeftTimeString
PUBLIC	?eventSetInterfaceWindow@@YAPAU_object@@PAU1@0@Z ; eventSetInterfaceWindow
PUBLIC	?eventQuestButtonClick@@YAPAU_object@@PAU1@0@Z	; eventQuestButtonClick
PUBLIC	?eventGetVisibleStartLine@@YAPAU_object@@PAU1@0@Z ; eventGetVisibleStartLine
PUBLIC	?eventSetVisibleStartLine@@YAPAU_object@@PAU1@0@Z ; eventSetVisibleStartLine
PUBLIC	?eventGetLineCount@@YAPAU_object@@PAU1@0@Z	; eventGetLineCount
PUBLIC	?eventSelectAnswer@@YAPAU_object@@PAU1@0@Z	; eventSelectAnswer
PUBLIC	?eventSetEventHandler@@YAPAU_object@@PAU1@0@Z	; eventSetEventHandler
PUBLIC	?eventEndEventProcess@@YAPAU_object@@PAU1@0@Z	; eventEndEventProcess
PUBLIC	?eventIsWait@@YAPAU_object@@PAU1@0@Z		; eventIsWait
PUBLIC	?eventSkip@@YAPAU_object@@PAU1@0@Z		; eventSkip
PUBLIC	?eventSetEventSetWidth@@YAPAU_object@@PAU1@0@Z	; eventSetEventSetWidth
PUBLIC	?eventRenderEventSet@@YAPAU_object@@PAU1@0@Z	; eventRenderEventSet
PUBLIC	?eventUpdateEventSet@@YAPAU_object@@PAU1@0@Z	; eventUpdateEventSet
PUBLIC	?eventInsertTextInline@@YAPAU_object@@PAU1@0@Z	; eventInsertTextInline
PUBLIC	?eventInsertText@@YAPAU_object@@PAU1@0@Z	; eventInsertText
PUBLIC	?eventAddEventSetLocalYPosition@@YAPAU_object@@PAU1@0@Z ; eventAddEventSetLocalYPosition
PUBLIC	?eventGetEventSetLocalYPosition@@YAPAU_object@@PAU1@0@Z ; eventGetEventSetLocalYPosition
PUBLIC	?eventSetRestrictedCount@@YAPAU_object@@PAU1@0@Z ; eventSetRestrictedCount
PUBLIC	?eventClearEventSet@@YAPAU_object@@PAU1@0@Z	; eventClearEventSet
PUBLIC	?eventRegisterEventSetFromString@@YAPAU_object@@PAU1@0@Z ; eventRegisterEventSetFromString
PUBLIC	?eventRegisterEventSet@@YAPAU_object@@PAU1@0@Z	; eventRegisterEventSet
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?eventRegisterEventSetFromString@@YAPAU_object@@PAU1@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?eventRegisterEventSetFromString@@YAPAU_object@@PAU1@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?eventRegisterEventSetFromString@@YAPAU_object@@PAU1@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?eventRegisterEventSetFromString@@YAPAU_object@@PAU1@0@Z$0
; Function compile flags: /Ogtp
; File d:\metin2\metin2\client_source_clean\client_source_clean\source\userinterface\pythoneventmanagermoudle.cpp
;	COMDAT ?eventRegisterEventSet@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_szFileName$ = -4					; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?eventRegisterEventSet@@YAPAU_object@@PAU1@0@Z PROC	; eventRegisterEventSet, COMDAT

; 6    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 7    : 	char * szFileName;
; 8    : 	if (!PyTuple_GetString(poArgs, 0, &szFileName))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _szFileName$[ebp]
  00007	50		 push	 eax
  00008	6a 00		 push	 0
  0000a	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000d	e8 00 00 00 00	 call	 ?PyTuple_GetString@@YA_NPAU_object@@HPAPAD@Z ; PyTuple_GetString
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	84 c0		 test	 al, al
  00017	75 0e		 jne	 SHORT $LN1@eventRegis

; 9    : 		return Py_BuildException();

  00019	6a 00		 push	 0
  0001b	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00020	83 c4 04	 add	 esp, 4

; 13   : }

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
$LN1@eventRegis:

; 10   : 
; 11   : 	int iEventIndex = CPythonEventManager::Instance().RegisterEventSet(szFileName);

  00027	ff 75 fc	 push	 DWORD PTR _szFileName$[ebp]
  0002a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonEventManager@@@@0PAVCPythonEventManager@@A ; CSingleton<CPythonEventManager>::ms_singleton
  00030	e8 00 00 00 00	 call	 ?RegisterEventSet@CPythonEventManager@@QAEHPBD@Z ; CPythonEventManager::RegisterEventSet

; 12   : 	return Py_BuildValue("i", iEventIndex);

  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i?$AA@
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00041	83 c4 08	 add	 esp, 8

; 13   : }

  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
?eventRegisterEventSet@@YAPAU_object@@PAU1@0@Z ENDP	; eventRegisterEventSet
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\metin2\metin2\client_source_clean\client_source_clean\source\userinterface\pythoneventmanagermoudle.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File d:\metin2\metin2\client_source_clean\client_source_clean\source\userinterface\pythoneventmanagermoudle.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File d:\metin2\metin2\client_source_clean\client_source_clean\source\userinterface\pythoneventmanagermoudle.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File d:\metin2\metin2\client_source_clean\client_source_clean\source\userinterface\pythoneventmanagermoudle.cpp
;	COMDAT ?eventRegisterEventSetFromString@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_szEventString$ = -48					; size = 4
$T2 = -44						; size = 24
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?eventRegisterEventSetFromString@@YAPAU_object@@PAU1@0@Z PROC ; eventRegisterEventSetFromString, COMDAT

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	6a ff		 push	 -1
  00008	68 00 00 00 00	 push	 __ehhandler$?eventRegisterEventSetFromString@@YAPAU_object@@PAU1@0@Z
  0000d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00013	50		 push	 eax
  00014	83 ec 28	 sub	 esp, 40			; 00000028H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c4		 xor	 eax, esp
  0001e	89 44 24 20	 mov	 DWORD PTR __$ArrayPad$[esp+52], eax
  00022	56		 push	 esi
  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00028	33 c4		 xor	 eax, esp
  0002a	50		 push	 eax
  0002b	8d 44 24 30	 lea	 eax, DWORD PTR __$EHRec$[esp+60]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00035	8b 45 0c	 mov	 eax, DWORD PTR _poArgs$[ebp]

; 17   : 	char * szEventString;
; 18   : 	if (!PyTuple_GetString(poArgs, 0, &szEventString))

  00038	8d 4c 24 0c	 lea	 ecx, DWORD PTR _szEventString$[esp+60]
  0003c	51		 push	 ecx
  0003d	6a 00		 push	 0
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 ?PyTuple_GetString@@YA_NPAU_object@@HPAPAD@Z ; PyTuple_GetString
  00045	83 c4 0c	 add	 esp, 12			; 0000000cH
  00048	84 c0		 test	 al, al
  0004a	75 0c		 jne	 SHORT $LN1@eventRegis

; 19   : 		return Py_BuildException();

  0004c	6a 00		 push	 0
  0004e	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00053	83 c4 04	 add	 esp, 4
  00056	eb 78		 jmp	 SHORT $LN2@eventRegis
$LN1@eventRegis:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 523  : 			: _CSTD strlen(_First));

  00058	8b 54 24 0c	 mov	 edx, DWORD PTR _szEventString$[esp+60]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 2284 : 		this->_Myres = this->_BUF_SIZE - 1;

  0005c	c7 44 24 24 0f
	00 00 00	 mov	 DWORD PTR $T2[esp+80], 15 ; 0000000fH

; 1170 : 		}
; 1171 : 
; 1172 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1173 : 		{	// assign _Count * _Ch
; 1174 : 		if (_Count == npos)
; 1175 : 			_Xlen();	// result too long
; 1176 : 
; 1177 : 		if (_Grow(_Count))
; 1178 : 			{	// make room and assign new stuff
; 1179 : 			_Chassign(0, _Count, _Ch);
; 1180 : 			_Eos(_Count);
; 1181 : 			}
; 1182 : 		return (*this);
; 1183 : 		}
; 1184 : 
; 1185 : 	template<class _Iter>
; 1186 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1187 : 			_Myt&>::type
; 1188 : 		assign(_Iter _First, _Iter _Last)
; 1189 : 		{	// assign [_First, _Last), input iterators
; 1190 : 		return (replace(begin(), end(), _First, _Last));
; 1191 : 		}
; 1192 : 
; 1193 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1194 : 		{	// assign [_First, _Last), const pointers
; 1195 : 		return (replace(begin(), end(), _First, _Last));
; 1196 : 		}
; 1197 : 
; 1198 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1199 : 		{	// assign [_First, _Last), const_iterators
; 1200 : 		return (replace(begin(), end(), _First, _Last));
; 1201 : 		}
; 1202 : 
; 1203 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1204 : 		{	// insert _Right at _Off
; 1205 : 		return (insert(_Off, _Right, 0, npos));
; 1206 : 		}
; 1207 : 
; 1208 : 	_Myt& insert(size_type _Off,
; 1209 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1210 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1211 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1212 : 			_Xran();	// _Off or _Roff off end
; 1213 : 		size_type _Num = _Right.size() - _Roff;
; 1214 : 		if (_Num < _Count)
; 1215 : 			_Count = _Num;	// trim _Count to size
; 1216 : 		if (npos - this->_Mysize <= _Count)
; 1217 : 			_Xlen();	// result too long
; 1218 : 
; 1219 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1220 : 			{	// make room and insert new stuff
; 1221 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1222 : 				this->_Myptr() + _Off,
; 1223 : 				this->_Mysize - _Off);	// empty out hole
; 1224 : 			if (this == &_Right)
; 1225 : 				_Traits::move(this->_Myptr() + _Off,
; 1226 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1227 : 						_Count);	// substring
; 1228 : 			else
; 1229 : 				_Traits::copy(this->_Myptr() + _Off,
; 1230 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1231 : 			_Eos(_Num);
; 1232 : 			}
; 1233 : 		return (*this);
; 1234 : 		}
; 1235 : 
; 1236 : 	_Myt& insert(size_type _Off,
; 1237 : 		const _Elem *_Ptr, size_type _Count)
; 1238 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1239 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1240 : 		if (_Count != 0)
; 1241 : 			_DEBUG_POINTER(_Ptr);
; 1242 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1243 : 
; 1244 : 		if (_Inside(_Ptr))
; 1245 : 			return (insert(_Off, *this,
; 1246 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1264 : 		{	// insert [_Ptr, <null>) at _Off
; 1265 : 		_DEBUG_POINTER(_Ptr);
; 1266 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1267 : 		}
; 1268 : 
; 1269 : 	_Myt& insert(size_type _Off,
; 1270 : 		size_type _Count, _Elem _Ch)
; 1271 : 		{	// insert _Count * _Ch at _Off
; 1272 : 		if (this->_Mysize < _Off)
; 1273 : 			_Xran();	// _Off off end
; 1274 : 		if (npos - this->_Mysize <= _Count)
; 1275 : 			_Xlen();	// result too long
; 1276 : 		size_type _Num;
; 1277 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1278 : 			{	// make room and insert new stuff
; 1279 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1280 : 				this->_Myptr() + _Off,
; 1281 : 				this->_Mysize - _Off);	// empty out hole
; 1282 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1283 : 			_Eos(_Num);
; 1284 : 			}
; 1285 : 		return (*this);
; 1286 : 		}
; 1287 : 
; 1288 : 	iterator insert(const_iterator _Where)
; 1289 : 		{	// insert <null> at _Where
; 1290 : 		return (insert(_Where, _Elem()));
; 1291 : 		}
; 1292 : 
; 1293 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1294 : 		{	// insert _Ch at _Where
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		insert(_Off, 1, _Ch);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1301 : 		{	// insert _Count * _Elem at _Where
; 1302 : 		size_type _Off = _Pdif(_Where, begin());
; 1303 : 		insert(_Off, _Count, _Ch);
; 1304 : 		return (begin() + _Off);
; 1305 : 		}
; 1306 : 
; 1307 : 	template<class _Iter>
; 1308 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1309 : 			iterator>::type
; 1310 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1311 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1312 : 		size_type _Off = _Pdif(_Where, begin());
; 1313 : 		replace(_Where, _Where, _First, _Last);
; 1314 : 		return (begin() + _Off);
; 1315 : 		}
; 1316 : 
; 1317 : 	iterator insert(const_iterator _Where,
; 1318 : 		const_pointer _First, const_pointer _Last)
; 1319 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1320 : 		size_type _Off = _Pdif(_Where, begin());
; 1321 : 		replace(_Where, _Where, _First, _Last);
; 1322 : 		return (begin() + _Off);
; 1323 : 		}
; 1324 : 
; 1325 : 	iterator insert(const_iterator _Where,
; 1326 : 		const_iterator _First, const_iterator _Last)
; 1327 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1328 : 		size_type _Off = _Pdif(_Where, begin());
; 1329 : 		replace(_Where, _Where, _First, _Last);
; 1330 : 		return (begin() + _Off);
; 1331 : 		}
; 1332 : 
; 1333 : 	_Myt& erase(size_type _Off = 0)
; 1334 : 		{	// erase elements [_Off, ...)
; 1335 : 		if (this->_Mysize < _Off)
; 1336 : 			_Xran();	// _Off off end
; 1337 : 		_Eos(_Off);
; 1338 : 		return (*this);
; 1339 : 		}
; 1340 : 
; 1341 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1342 : 		{	// erase elements [_Off, _Off + _Count)
; 1343 : 		if (this->_Mysize < _Off)
; 1344 : 			_Xran();	// _Off off end
; 1345 : 		if (this->_Mysize - _Off <= _Count)
; 1346 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1347 : 		else if (0 < _Count)
; 1348 : 			{	// move elements down
; 1349 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1350 : 			size_type _Newsize = this->_Mysize - _Count;
; 1351 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1352 : 			_Eos(_Newsize);
; 1353 : 			}
; 1354 : 		return (*this);
; 1355 : 		}
; 1356 : 
; 1357 : 	iterator erase(const_iterator _Where)
; 1358 : 		{	// erase element at _Where
; 1359 : 		size_type _Count = _Pdif(_Where, begin());
; 1360 : 		erase(_Count, 1);
; 1361 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1362 : 		}
; 1363 : 
; 1364 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1365 : 		{	// erase substring [_First, _Last)
; 1366 : 		_DEBUG_RANGE(_First, _Last);
; 1367 : 		size_type _Count = _Pdif(_First, begin());
; 1368 : 		erase(_Count, _Pdif(_Last, _First));
; 1369 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1370 : 		}
; 1371 : 
; 1372 : 	void clear() _NOEXCEPT
; 1373 : 		{	// erase all
; 1374 : 		_Eos(0);
; 1375 : 		}
; 1376 : 
; 1377 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1378 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1379 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1380 : 		}
; 1381 : 
; 1382 : 	_Myt& replace(size_type _Off,
; 1383 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1384 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1385 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1386 : 			_Xran();	// _Off or _Roff off end
; 1387 : 		if (this->_Mysize - _Off < _N0)
; 1388 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1389 : 		size_type _Num = _Right.size() - _Roff;
; 1390 : 		if (_Num < _Count)
; 1391 : 			_Count = _Num;	// trim _Count to size
; 1392 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1393 : 			_Xlen();	// result too long
; 1394 : 
; 1395 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1396 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1397 : 		if (this->_Mysize < _Newsize)
; 1398 : 			_Grow(_Newsize);
; 1399 : 
; 1400 : 		if (this != &_Right)
; 1401 : 			{	// no overlap, just move down and copy in new stuff
; 1402 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1403 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1404 : 			_Traits::copy(this->_Myptr() + _Off,
; 1405 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1406 : 			}
; 1407 : 		else if (_Count <= _N0)
; 1408 : 			{	// hole doesn't get larger, just copy in substring
; 1409 : 			_Traits::move(this->_Myptr() + _Off,
; 1410 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1411 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1412 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1413 : 			}
; 1414 : 		else if (_Roff <= _Off)
; 1415 : 			{	// hole gets larger, substring begins before hole
; 1416 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1417 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1418 : 			_Traits::move(this->_Myptr() + _Off,
; 1419 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1420 : 			}
; 1421 : 		else if (_Off + _N0 <= _Roff)
; 1422 : 			{	// hole gets larger, substring begins after hole
; 1423 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1424 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1425 : 			_Traits::move(this->_Myptr() + _Off,
; 1426 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1427 : 				_Count);	// fill hole
; 1428 : 			}
; 1429 : 		else
; 1430 : 			{	// hole gets larger, substring begins in hole
; 1431 : 			_Traits::move(this->_Myptr() + _Off,
; 1432 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1433 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1434 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1435 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1436 : 				this->_Myptr() + _Roff + _Count,
; 1437 : 				_Count - _N0);	// fill rest of new hole
; 1438 : 			}
; 1439 : 
; 1440 : 		_Eos(_Newsize);
; 1441 : 		return (*this);
; 1442 : 		}
; 1443 : 
; 1444 : 	_Myt& replace(size_type _Off,
; 1445 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1446 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1447 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1448 : 		if (_Count != 0)
; 1449 : 			_DEBUG_POINTER(_Ptr);
; 1450 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(
; 1519 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1520 : 		}
; 1521 : 
; 1522 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1523 : 		const _Elem *_Ptr, size_type _Count)
; 1524 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1525 : 		return (replace(
; 1526 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const _Elem *_Ptr)
; 1531 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1532 : 		return (replace(
; 1533 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1534 : 		}
; 1535 : 
; 1536 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1537 : 		size_type _Count, _Elem _Ch)
; 1538 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1539 : 		return (replace(
; 1540 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1541 : 		}
; 1542 : 
; 1543 : 	template<class _Iter>
; 1544 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1545 : 			_Myt&>::type
; 1546 : 		replace(const_iterator _First, const_iterator _Last,
; 1547 : 			_Iter _First2, _Iter _Last2)
; 1548 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1549 : 		_Myt _Right(_First2, _Last2);
; 1550 : 		replace(_First, _Last, _Right);
; 1551 : 		return (*this);
; 1552 : 		}
; 1553 : 
; 1554 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1555 : 		const_pointer _First2, const_pointer _Last2)
; 1556 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1557 : 		if (_First2 == _Last2)
; 1558 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1559 : 		else
; 1560 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1561 : 				&*_First2, _Last2 - _First2);
; 1562 : 		return (*this);
; 1563 : 		}
; 1564 : 
; 1565 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1566 : 		pointer _First2, pointer _Last2)
; 1567 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1568 : 		if (_First2 == _Last2)
; 1569 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1570 : 		else
; 1571 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1572 : 				&*_First2, _Last2 - _First2);
; 1573 : 		return (*this);
; 1574 : 		}
; 1575 : 
; 1576 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1577 : 		const_iterator _First2, const_iterator _Last2)
; 1578 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1579 : 		if (_First2 == _Last2)
; 1580 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1581 : 		else
; 1582 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1583 : 				&*_First2, _Last2 - _First2);
; 1584 : 		return (*this);
; 1585 : 		}
; 1586 : 
; 1587 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1588 : 		iterator _First2, iterator _Last2)
; 1589 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1590 : 		if (_First2 == _Last2)
; 1591 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1592 : 		else
; 1593 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1594 : 				&*_First2, _Last2 - _First2);
; 1595 : 		return (*this);
; 1596 : 		}
; 1597 : 
; 1598 : 	iterator begin() _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of mutable sequence
; 1600 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1601 : 		}
; 1602 : 
; 1603 : 	const_iterator begin() const _NOEXCEPT
; 1604 : 		{	// return iterator for beginning of nonmutable sequence
; 1605 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1606 : 		}
; 1607 : 
; 1608 : 	iterator end() _NOEXCEPT
; 1609 : 		{	// return iterator for end of mutable sequence
; 1610 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1611 : 		}
; 1612 : 
; 1613 : 	const_iterator end() const _NOEXCEPT
; 1614 : 		{	// return iterator for end of nonmutable sequence
; 1615 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1616 : 		}
; 1617 : 
; 1618 : 	reverse_iterator rbegin() _NOEXCEPT
; 1619 : 		{	// return iterator for beginning of reversed mutable sequence
; 1620 : 		return (reverse_iterator(end()));
; 1621 : 		}
; 1622 : 
; 1623 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1624 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1625 : 		return (const_reverse_iterator(end()));
; 1626 : 		}
; 1627 : 
; 1628 : 	reverse_iterator rend() _NOEXCEPT
; 1629 : 		{	// return iterator for end of reversed mutable sequence
; 1630 : 		return (reverse_iterator(begin()));
; 1631 : 		}
; 1632 : 
; 1633 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1634 : 		{	// return iterator for end of reversed nonmutable sequence
; 1635 : 		return (const_reverse_iterator(begin()));
; 1636 : 		}
; 1637 : 
; 1638 : 	const_iterator cbegin() const _NOEXCEPT
; 1639 : 		{	// return iterator for beginning of nonmutable sequence
; 1640 : 		return (((const _Myt *)this)->begin());
; 1641 : 		}
; 1642 : 
; 1643 : 	const_iterator cend() const _NOEXCEPT
; 1644 : 		{	// return iterator for end of nonmutable sequence
; 1645 : 		return (((const _Myt *)this)->end());
; 1646 : 		}
; 1647 : 
; 1648 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1649 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1650 : 		return (((const _Myt *)this)->rbegin());
; 1651 : 		}
; 1652 : 
; 1653 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1654 : 		{	// return iterator for end of reversed nonmutable sequence
; 1655 : 		return (((const _Myt *)this)->rend());
; 1656 : 		}
; 1657 : 
; 1658 : 	void shrink_to_fit()
; 1659 : 		{	// reduce capacity
; 1660 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1661 : 			{	// worth shrinking, do it
; 1662 : 			_Myt _Tmp(*this);
; 1663 : 			swap(_Tmp);
; 1664 : 			}
; 1665 : 		}
; 1666 : 
; 1667 : 	reference at(size_type _Off)
; 1668 : 		{	// subscript mutable sequence with checking
; 1669 : 		if (this->_Mysize <= _Off)
; 1670 : 			_Xran();	// _Off off end
; 1671 : 		return (this->_Myptr()[_Off]);
; 1672 : 		}
; 1673 : 
; 1674 : 	const_reference at(size_type _Off) const
; 1675 : 		{	// subscript nonmutable sequence with checking
; 1676 : 		if (this->_Mysize <= _Off)
; 1677 : 			_Xran();	// _Off off end
; 1678 : 		return (this->_Myptr()[_Off]);
; 1679 : 		}
; 1680 : 
; 1681 : 	reference operator[](size_type _Off)
; 1682 : 		{	// subscript mutable sequence
; 1683 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1684 : 		if (this->_Mysize < _Off)	// sic
; 1685 : 			_DEBUG_ERROR("string subscript out of range");
; 1686 : 
; 1687 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1688 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1689 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1690 : 
; 1691 : 		return (this->_Myptr()[_Off]);
; 1692 : 		}
; 1693 : 
; 1694 : 	const_reference operator[](size_type _Off) const
; 1695 : 		{	// subscript nonmutable sequence
; 1696 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1697 : 		if (this->_Mysize < _Off)	// sic
; 1698 : 			_DEBUG_ERROR("string subscript out of range");
; 1699 : 
; 1700 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1701 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1702 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1703 : 
; 1704 : 		return (this->_Myptr()[_Off]);
; 1705 : 		}
; 1706 : 
; 1707 : 	void push_back(_Elem _Ch)
; 1708 : 		{	// insert element at end
; 1709 : 		insert(end(), _Ch);
; 1710 : 		}
; 1711 : 
; 1712 : 	void pop_back()
; 1713 : 		{	// erase element at end
; 1714 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1715 : 		}
; 1716 : 
; 1717 : 	reference front()
; 1718 : 		{	// return first element of mutable sequence
; 1719 : 		return (*begin());
; 1720 : 		}
; 1721 : 
; 1722 : 	const_reference front() const
; 1723 : 		{	// return first element of nonmutable sequence
; 1724 : 		return (*begin());
; 1725 : 		}
; 1726 : 
; 1727 : 	reference back()
; 1728 : 		{	// return last element of mutable sequence
; 1729 : 		return (*(end() - 1));
; 1730 : 		}
; 1731 : 
; 1732 : 	const_reference back() const
; 1733 : 		{	// return last element of nonmutable sequence
; 1734 : 		return (*(end() - 1));
; 1735 : 		}
; 1736 : 
; 1737 : 	const _Elem *c_str() const _NOEXCEPT
; 1738 : 		{	// return pointer to null-terminated nonmutable array
; 1739 : 		return (this->_Myptr());
; 1740 : 		}
; 1741 : 
; 1742 : 	const _Elem *data() const _NOEXCEPT
; 1743 : 		{	// return pointer to nonmutable array
; 1744 : 		return (c_str());
; 1745 : 		}
; 1746 : 
; 1747 : 	size_type length() const _NOEXCEPT
; 1748 : 		{	// return length of sequence
; 1749 : 		return (this->_Mysize);
; 1750 : 		}
; 1751 : 
; 1752 : 	size_type size() const _NOEXCEPT
; 1753 : 		{	// return length of sequence
; 1754 : 		return (this->_Mysize);
; 1755 : 		}
; 1756 : 
; 1757 : 	size_type max_size() const _NOEXCEPT
; 1758 : 		{	// return maximum possible length of sequence
; 1759 : 		size_type _Num = this->_Getal().max_size();
; 1760 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1761 : 		}
; 1762 : 
; 1763 : 	void resize(size_type _Newsize)
; 1764 : 		{	// determine new length, padding with null elements as needed
; 1765 : 		resize(_Newsize, _Elem());
; 1766 : 		}
; 1767 : 
; 1768 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1769 : 		{	// determine new length, padding with _Ch elements as needed
; 1770 : 		if (_Newsize <= this->_Mysize)
; 1771 : 			_Eos(_Newsize);
; 1772 : 		else
; 1773 : 			append(_Newsize - this->_Mysize, _Ch);
; 1774 : 		}
; 1775 : 
; 1776 : 	size_type capacity() const _NOEXCEPT
; 1777 : 		{	// return current length of allocated storage
; 1778 : 		return (this->_Myres);
; 1779 : 		}
; 1780 : 
; 1781 : 	void reserve(size_type _Newcap = 0)
; 1782 : 		{	// determine new minimum length of allocated storage
; 1783 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1784 : 			{	// change reservation
; 1785 : 			size_type _Size = this->_Mysize;
; 1786 : 			if (_Grow(_Newcap, true))
; 1787 : 				_Eos(_Size);
; 1788 : 			}
; 1789 : 		}
; 1790 : 
; 1791 : 	bool empty() const _NOEXCEPT
; 1792 : 		{	// test if sequence is empty
; 1793 : 		return (this->_Mysize == 0);
; 1794 : 		}
; 1795 : 
; 1796 : 	_SCL_INSECURE_DEPRECATE
; 1797 : 
; 1798 : 	size_type copy(_Elem *_Ptr,
; 1799 : 		size_type _Count, size_type _Off = 0) const
; 1800 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1801 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1802 : 		if (_Count != 0)
; 1803 : 			_DEBUG_POINTER(_Ptr);
; 1804 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1805 : 
; 1806 : 		if (this->_Mysize < _Off)
; 1807 : 			_Xran();	// _Off off end
; 1808 : 		if (this->_Mysize - _Off < _Count)
; 1809 : 			_Count = this->_Mysize - _Off;
; 1810 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1811 : 		return (_Count);
; 1812 : 		}
; 1813 : 
; 1814 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1815 : 		size_type _Count, size_type _Off = 0) const
; 1816 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1817 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1818 : 		if (_Count != 0)
; 1819 : 			_DEBUG_POINTER(_Dest);
; 1820 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1821 : 
; 1822 : 		if (this->_Mysize < _Off)
; 1823 : 			_Xran();	// _Off off end
; 1824 : 		if (this->_Mysize - _Off < _Count)
; 1825 : 			_Count = this->_Mysize - _Off;
; 1826 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1827 : 		return (_Count);
; 1828 : 		}
; 1829 : 
; 1830 : 	void _Swap_bx(_Myt& _Right)
; 1831 : 		{	// exchange _Bx with _Right._Bx
; 1832 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1833 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1834 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1835 : 			else
; 1836 : 				{	// swap large with small
; 1837 : 				pointer _Ptr = this->_Bx._Ptr;
; 1838 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1839 : 				_Traits::copy(this->_Bx._Buf,
; 1840 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1841 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1842 : 				}
; 1843 : 		else
; 1844 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1845 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1846 : 			else
; 1847 : 				{	// swap small with large
; 1848 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1849 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1850 : 				_Traits::copy(_Right._Bx._Buf,
; 1851 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1852 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1853 : 				}
; 1854 : 		}
; 1855 : 
; 1856 : 	void swap(_Myt& _Right)
; 1857 : 		{	// exchange contents with _Right
; 1858 : 		if (this == &_Right)
; 1859 : 			;	// same object, do nothing
; 1860 : 		else if (this->_Getal() == _Right._Getal())
; 1861 : 			{	// same allocator, swap control information
; 1862 : 			this->_Swap_all(_Right);
; 1863 : 			_Swap_bx(_Right);
; 1864 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1865 : 			_STD swap(this->_Myres, _Right._Myres);
; 1866 : 			}
; 1867 : 
; 1868 : 		else if (_Alty::propagate_on_container_swap::value)
; 1869 : 			{	// swap allocators and control information
; 1870 : 			this->_Swap_alloc(_Right);
; 1871 : 			_Swap_bx(_Right);
; 1872 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1873 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1874 : 			_STD swap(this->_Myres, _Right._Myres);
; 1875 : 			}
; 1876 : 
; 1877 : 		else
; 1878 : 			{	// different allocator, do multiple assigns
; 1879 : 			_Myt _Tmp = *this;
; 1880 : 
; 1881 : 			*this = _Right;
; 1882 : 			_Right = _Tmp;
; 1883 : 			}
; 1884 : 		}
; 1885 : 
; 1886 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1887 : 		{	// look for _Right beginning at or after _Off
; 1888 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1889 : 		}
; 1890 : 
; 1891 : 	size_type find(const _Elem *_Ptr,
; 1892 : 		size_type _Off, size_type _Count) const
; 1893 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1894 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1895 : 		if (_Count != 0)
; 1896 : 			_DEBUG_POINTER(_Ptr);
; 1897 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1898 : 
; 1899 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1900 : 			return (_Off);	// null string always matches (if inside string)
; 1901 : 
; 1902 : 		size_type _Nm;
; 1903 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1904 : 			{	// room for match, look for it
; 1905 : 			const _Elem *_Uptr, *_Vptr;
; 1906 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1907 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1908 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1909 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1910 : 					return (_Uptr - this->_Myptr());	// found a match
; 1911 : 			}
; 1912 : 
; 1913 : 		return (npos);	// no match
; 1914 : 		}
; 1915 : 
; 1916 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1917 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1918 : 		_DEBUG_POINTER(_Ptr);
; 1919 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1920 : 		}
; 1921 : 
; 1922 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1923 : 		{	// look for _Ch at or after _Off
; 1924 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1925 : 		}
; 1926 : 
; 1927 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1928 : 		{	// look for _Right beginning before _Off
; 1929 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1930 : 		}
; 1931 : 
; 1932 : 	size_type rfind(const _Elem *_Ptr,
; 1933 : 		size_type _Off, size_type _Count) const
; 1934 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1935 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1936 : 		if (_Count != 0)
; 1937 : 			_DEBUG_POINTER(_Ptr);
; 1938 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1939 : 
; 1940 : 		if (_Count == 0)
; 1941 : 			return (_Off < this->_Mysize ? _Off
; 1942 : 				: this->_Mysize);	// null always matches
; 1943 : 		if (_Count <= this->_Mysize)
; 1944 : 			{	// room for match, look for it
; 1945 : 			const _Elem *_Uptr = this->_Myptr() +
; 1946 : 				(_Off < this->_Mysize - _Count ? _Off
; 1947 : 					: this->_Mysize - _Count);
; 1948 : 			for (; ; --_Uptr)
; 1949 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1950 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1951 : 					return (_Uptr - this->_Myptr());	// found a match
; 1952 : 				else if (_Uptr == this->_Myptr())
; 1953 : 					break;	// at beginning, no more chance for match
; 1954 : 			}
; 1955 : 
; 1956 : 		return (npos);	// no match
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1960 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1961 : 		_DEBUG_POINTER(_Ptr);
; 1962 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1963 : 		}
; 1964 : 
; 1965 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1966 : 		{	// look for _Ch before _Off
; 1967 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1968 : 		}
; 1969 : 
; 1970 : 	size_type find_first_of(const _Myt& _Right,
; 1971 : 		size_type _Off = 0) const _NOEXCEPT
; 1972 : 		{	// look for one of _Right at or after _Off
; 1973 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1974 : 		}
; 1975 : 
; 1976 : 	size_type find_first_of(const _Elem *_Ptr,
; 1977 : 		size_type _Off, size_type _Count) const
; 1978 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1979 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1980 : 		if (_Count != 0)
; 1981 : 			_DEBUG_POINTER(_Ptr);
; 1982 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1983 : 
; 1984 : 		if (0 < _Count && _Off < this->_Mysize)
; 1985 : 			{	// room for match, look for it
; 1986 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1987 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1988 : 				_Uptr < _Vptr; ++_Uptr)
; 1989 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1990 : 					return (_Uptr - this->_Myptr());	// found a match
; 1991 : 			}
; 1992 : 
; 1993 : 		return (npos);	// no match
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_first_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off = 0) const
; 1998 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1999 : 		_DEBUG_POINTER(_Ptr);
; 2000 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2001 : 		}
; 2002 : 
; 2003 : 	size_type find_first_of(_Elem _Ch,
; 2004 : 		size_type _Off = 0) const
; 2005 : 		{	// look for _Ch at or after _Off
; 2006 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 2007 : 		}
; 2008 : 
; 2009 : 	size_type find_last_of(const _Myt& _Right,
; 2010 : 		size_type _Off = npos) const _NOEXCEPT
; 2011 : 		{	// look for one of _Right before _Off
; 2012 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 2013 : 		}
; 2014 : 
; 2015 : 	size_type find_last_of(const _Elem *_Ptr,
; 2016 : 		size_type _Off, size_type _Count) const
; 2017 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 2018 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2019 : 		if (_Count != 0)
; 2020 : 			_DEBUG_POINTER(_Ptr);
; 2021 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2022 : 
; 2023 : 		if (0 < _Count && 0 < this->_Mysize)
; 2024 : 			{	// worth searching, do it
; 2025 : 			const _Elem *_Uptr = this->_Myptr()
; 2026 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2027 : 			for (; ; --_Uptr)
; 2028 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2029 : 					return (_Uptr - this->_Myptr());	// found a match
; 2030 : 				else if (_Uptr == this->_Myptr())
; 2031 : 					break;	// at beginning, no more chance for match
; 2032 : 			}
; 2033 : 
; 2034 : 		return (npos);	// no match
; 2035 : 		}
; 2036 : 
; 2037 : 	size_type find_last_of(const _Elem *_Ptr,
; 2038 : 		size_type _Off = npos) const
; 2039 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2040 : 		_DEBUG_POINTER(_Ptr);
; 2041 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2042 : 		}
; 2043 : 
; 2044 : 	size_type find_last_of(_Elem _Ch,
; 2045 : 		size_type _Off = npos) const
; 2046 : 		{	// look for _Ch before _Off
; 2047 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2048 : 		}
; 2049 : 
; 2050 : 	size_type find_first_not_of(const _Myt& _Right,
; 2051 : 		size_type _Off = 0) const _NOEXCEPT
; 2052 : 		{	// look for none of _Right at or after _Off
; 2053 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2054 : 			_Right.size()));
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off, size_type _Count) const
; 2059 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2060 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2061 : 		if (_Count != 0)
; 2062 : 			_DEBUG_POINTER(_Ptr);
; 2063 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2064 : 
; 2065 : 		if (_Off < this->_Mysize)
; 2066 : 			{	// room for match, look for it
; 2067 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2068 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2069 : 				_Uptr < _Vptr; ++_Uptr)
; 2070 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2071 : 					return (_Uptr - this->_Myptr());
; 2072 : 			}
; 2073 : 		return (npos);
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off = 0) const
; 2078 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2079 : 		_DEBUG_POINTER(_Ptr);
; 2080 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_first_not_of(_Elem _Ch,
; 2084 : 		size_type _Off = 0) const
; 2085 : 		{	// look for non _Ch at or after _Off
; 2086 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2087 : 		}
; 2088 : 
; 2089 : 	size_type find_last_not_of(const _Myt& _Right,
; 2090 : 		size_type _Off = npos) const _NOEXCEPT
; 2091 : 		{	// look for none of _Right before _Off
; 2092 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2093 : 		}
; 2094 : 
; 2095 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2096 : 		size_type _Off, size_type _Count) const
; 2097 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2098 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2099 : 		if (_Count != 0)
; 2100 : 			_DEBUG_POINTER(_Ptr);
; 2101 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2102 : 
; 2103 : 		if (0 < this->_Mysize)
; 2104 : 			{	// worth searching, do it
; 2105 : 			const _Elem *_Uptr = this->_Myptr()
; 2106 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2107 : 			for (; ; --_Uptr)
; 2108 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2109 : 					return (_Uptr - this->_Myptr());
; 2110 : 				else if (_Uptr == this->_Myptr())
; 2111 : 					break;
; 2112 : 			}
; 2113 : 		return (npos);
; 2114 : 		}
; 2115 : 
; 2116 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2117 : 		size_type _Off = npos) const
; 2118 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2119 : 		_DEBUG_POINTER(_Ptr);
; 2120 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2121 : 		}
; 2122 : 
; 2123 : 	size_type find_last_not_of(_Elem _Ch,
; 2124 : 		size_type _Off = npos) const
; 2125 : 		{	// look for non _Ch before _Off
; 2126 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2127 : 		}
; 2128 : 
; 2129 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2130 : 		{	// return [_Off, _Off + _Count) as new string
; 2131 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2132 : 		}
; 2133 : 
; 2134 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2135 : 		{	// compare [0, _Mysize) with _Right
; 2136 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2137 : 		}
; 2138 : 
; 2139 : 	int compare(size_type _Off, size_type _N0,
; 2140 : 		const _Myt& _Right) const
; 2141 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2142 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2143 : 		}
; 2144 : 
; 2145 : 	int compare(size_type _Off,
; 2146 : 		size_type _N0, const _Myt& _Right,
; 2147 : 		size_type _Roff, size_type _Count) const
; 2148 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2149 : 		if (_Right.size() < _Roff)
; 2150 : 			_Xran();	// _Off off end
; 2151 : 		if (_Right._Mysize - _Roff < _Count)
; 2152 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2153 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2154 : 		}
; 2155 : 
; 2156 : 	int compare(const _Elem *_Ptr) const
; 2157 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2158 : 		_DEBUG_POINTER(_Ptr);
; 2159 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2160 : 		}
; 2161 : 
; 2162 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2163 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2164 : 		_DEBUG_POINTER(_Ptr);
; 2165 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2166 : 		}
; 2167 : 
; 2168 : 	int compare(size_type _Off,
; 2169 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2170 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2171 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2172 : 		if (_Count != 0)
; 2173 : 			_DEBUG_POINTER(_Ptr);
; 2174 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2175 : 
; 2176 : 		if (this->_Mysize < _Off)
; 2177 : 			_Xran();	// _Off off end
; 2178 : 		if (this->_Mysize - _Off < _N0)
; 2179 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2180 : 
; 2181 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2182 : 			_N0 < _Count ? _N0 : _Count);
; 2183 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2184 : 			: _N0 == _Count ? 0 : +1);
; 2185 : 		}
; 2186 : 
; 2187 : 	allocator_type get_allocator() const _NOEXCEPT
; 2188 : 		{	// return allocator object for values
; 2189 : 		return (this->_Getal());
; 2190 : 		}
; 2191 : 
; 2192 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2193 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2194 : 		if (_Count == 1)
; 2195 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2196 : 		else
; 2197 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2198 : 		}
; 2199 : 
; 2200 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2201 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2202 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2203 : 		if (max_size() < _Newres)
; 2204 : 			_Newres = _Newsize;	// undo roundup if too big
; 2205 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2206 : 			;
; 2207 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2208 : 			_Newres = this->_Myres
; 2209 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2210 : 		else
; 2211 : 			_Newres = max_size();	// settle for max_size()
; 2212 : 
; 2213 : 		_Elem *_Ptr;
; 2214 : 		_TRY_BEGIN
; 2215 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2216 : 		_CATCH_ALL
; 2217 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2218 : 			_TRY_BEGIN
; 2219 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2220 : 			_CATCH_ALL
; 2221 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2222 : 			_RERAISE;
; 2223 : 			_CATCH_END
; 2224 : 		_CATCH_END
; 2225 : 
; 2226 : 		if (0 < _Oldlen)
; 2227 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2228 : 				_Oldlen);	// copy existing elements
; 2229 : 		_Tidy(true);
; 2230 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2231 : 		this->_Myres = _Newres;
; 2232 : 		_Eos(_Oldlen);
; 2233 : 		}
; 2234 : 
; 2235 : 	void _Eos(size_type _Newsize)
; 2236 : 		{	// set new length and null terminator
; 2237 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00064	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T2[esp+76], 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  0006c	c6 44 24 10 00	 mov	 BYTE PTR $T2[esp+60], 0

; 523  : 			: _CSTD strlen(_First));

  00071	80 3a 00	 cmp	 BYTE PTR [edx], 0
  00074	75 04		 jne	 SHORT $LN47@eventRegis
  00076	33 c9		 xor	 ecx, ecx
  00078	eb 0f		 jmp	 SHORT $LN48@eventRegis
$LN47@eventRegis:
  0007a	8b ca		 mov	 ecx, edx
  0007c	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
  0007f	90		 npad	 1
$LL83@eventRegis:
  00080	8a 01		 mov	 al, BYTE PTR [ecx]
  00082	41		 inc	 ecx
  00083	84 c0		 test	 al, al
  00085	75 f9		 jne	 SHORT $LL83@eventRegis
  00087	2b ce		 sub	 ecx, esi
$LN48@eventRegis:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 1169 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00089	51		 push	 ecx
  0008a	52		 push	 edx
  0008b	8d 4c 24 18	 lea	 ecx, DWORD PTR $T2[esp+68]
  0008f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File d:\metin2\metin2\client_source_clean\client_source_clean\source\userinterface\pythoneventmanagermoudle.cpp

; 21   : 	int iEventIndex = CPythonEventManager::Instance().RegisterEventSetFromString(szEventString);

  00094	8d 44 24 10	 lea	 eax, DWORD PTR $T2[esp+60]
  00098	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+68], 0
  000a0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonEventManager@@@@0PAVCPythonEventManager@@A ; CSingleton<CPythonEventManager>::ms_singleton
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 ?RegisterEventSetFromString@CPythonEventManager@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CPythonEventManager::RegisterEventSetFromString
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 2275 : 		else if (this->_BUF_SIZE <= this->_Myres)

  000ac	83 7c 24 24 10	 cmp	 DWORD PTR $T2[esp+80], 16 ; 00000010H
; File d:\metin2\metin2\client_source_clean\client_source_clean\source\userinterface\pythoneventmanagermoudle.cpp

; 21   : 	int iEventIndex = CPythonEventManager::Instance().RegisterEventSetFromString(szEventString);

  000b1	8b f0		 mov	 esi, eax
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 2275 : 		else if (this->_BUF_SIZE <= this->_Myres)

  000b3	72 0c		 jb	 SHORT $LN71@eventRegis
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  000b5	ff 74 24 10	 push	 DWORD PTR $T2[esp+60]
  000b9	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000be	83 c4 04	 add	 esp, 4
$LN71@eventRegis:
; File d:\metin2\metin2\client_source_clean\client_source_clean\source\userinterface\pythoneventmanagermoudle.cpp

; 22   : 	return Py_BuildValue("i", iEventIndex);

  000c1	56		 push	 esi
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i?$AA@
  000c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  000cd	83 c4 08	 add	 esp, 8
$LN2@eventRegis:

; 23   : }

  000d0	8b 4c 24 30	 mov	 ecx, DWORD PTR __$EHRec$[esp+60]
  000d4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000db	59		 pop	 ecx
  000dc	5e		 pop	 esi
  000dd	8b 4c 24 20	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+52]
  000e1	33 cc		 xor	 ecx, esp
  000e3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e8	8b e5		 mov	 esp, ebp
  000ea	5d		 pop	 ebp
  000eb	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?eventRegisterEventSetFromString@@YAPAU_object@@PAU1@0@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?eventRegisterEventSetFromString@@YAPAU_object@@PAU1@0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 d4	 lea	 eax, DWORD PTR [edx-44]
  0000f	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	83 c0 04	 add	 eax, 4
  0001c	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?eventRegisterEventSetFromString@@YAPAU_object@@PAU1@0@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?eventRegisterEventSetFromString@@YAPAU_object@@PAU1@0@Z ENDP ; eventRegisterEventSetFromString
; Function compile flags: /Ogtp
; File d:\metin2\metin2\client_source_clean\client_source_clean\source\userinterface\pythoneventmanagermoudle.cpp
;	COMDAT ?eventClearEventSet@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_iIndex$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?eventClearEventSet@@YAPAU_object@@PAU1@0@Z PROC	; eventClearEventSet, COMDAT

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 27   : 	int iIndex;
; 28   : 	if (!PyTuple_GetInteger(poArgs, 0, &iIndex))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _iIndex$[ebp]
  00007	50		 push	 eax
  00008	6a 00		 push	 0
  0000a	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000d	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	84 c0		 test	 al, al
  00017	75 0e		 jne	 SHORT $LN1@eventClear

; 29   : 		return Py_BuildException();

  00019	6a 00		 push	 0
  0001b	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00020	83 c4 04	 add	 esp, 4

; 33   : }

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
$LN1@eventClear:

; 30   : 
; 31   : 	CPythonEventManager::Instance().ClearEventSeti(iIndex);

  00027	ff 75 fc	 push	 DWORD PTR _iIndex$[ebp]
  0002a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonEventManager@@@@0PAVCPythonEventManager@@A ; CSingleton<CPythonEventManager>::ms_singleton
  00030	e8 00 00 00 00	 call	 ?ClearEventSeti@CPythonEventManager@@QAEXH@Z ; CPythonEventManager::ClearEventSeti

; 32   : 	return Py_BuildNone();

  00035	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 33   : }

  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?eventClearEventSet@@YAPAU_object@@PAU1@0@Z ENDP	; eventClearEventSet
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\metin2\metin2\client_source_clean\client_source_clean\source\userinterface\pythoneventmanagermoudle.cpp
;	COMDAT ?eventSetRestrictedCount@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_iIndex$ = -8						; size = 4
_iCount$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?eventSetRestrictedCount@@YAPAU_object@@PAU1@0@Z PROC	; eventSetRestrictedCount, COMDAT

; 36   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 37   : 	int iIndex;
; 38   : 	if (!PyTuple_GetInteger(poArgs, 0, &iIndex))

  00006	8d 45 f8	 lea	 eax, DWORD PTR _iIndex$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	84 c0		 test	 al, al
  00019	75 0e		 jne	 SHORT $LN2@eventSetRe
$LN7@eventSetRe:

; 39   : 		return Py_BuildException();

  0001b	6a 00		 push	 0
  0001d	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00022	83 c4 04	 add	 esp, 4

; 47   : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
$LN2@eventSetRe:

; 40   : 
; 41   : 	int iCount;
; 42   : 	if (!PyTuple_GetInteger(poArgs, 1, &iCount))

  00029	8d 45 fc	 lea	 eax, DWORD PTR _iCount$[ebp]
  0002c	50		 push	 eax
  0002d	6a 01		 push	 1
  0002f	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  00032	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003a	84 c0		 test	 al, al
  0003c	74 dd		 je	 SHORT $LN7@eventSetRe

; 43   : 		return Py_BuildException();
; 44   : 
; 45   : 	CPythonEventManager::Instance().SetRestrictedCount(iIndex, iCount);

  0003e	ff 75 fc	 push	 DWORD PTR _iCount$[ebp]
  00041	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonEventManager@@@@0PAVCPythonEventManager@@A ; CSingleton<CPythonEventManager>::ms_singleton
  00047	ff 75 f8	 push	 DWORD PTR _iIndex$[ebp]
  0004a	e8 00 00 00 00	 call	 ?SetRestrictedCount@CPythonEventManager@@QAEXHH@Z ; CPythonEventManager::SetRestrictedCount

; 46   : 	return Py_BuildNone();

  0004f	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 47   : }

  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
?eventSetRestrictedCount@@YAPAU_object@@PAU1@0@Z ENDP	; eventSetRestrictedCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\metin2\metin2\client_source_clean\client_source_clean\source\userinterface\pythoneventmanagermoudle.cpp
;	COMDAT ?eventGetEventSetLocalYPosition@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_iIndex$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?eventGetEventSetLocalYPosition@@YAPAU_object@@PAU1@0@Z PROC ; eventGetEventSetLocalYPosition, COMDAT

; 50   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 51   : 	int iIndex;
; 52   : 	if (!PyTuple_GetInteger(poArgs, 0, &iIndex))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _iIndex$[ebp]
  00007	50		 push	 eax
  00008	6a 00		 push	 0
  0000a	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000d	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	84 c0		 test	 al, al
  00017	75 0e		 jne	 SHORT $LN1@eventGetEv

; 53   : 		return Py_BuildException();

  00019	6a 00		 push	 0
  0001b	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00020	83 c4 04	 add	 esp, 4

; 56   : }

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
$LN1@eventGetEv:

; 54   : 
; 55   : 	return Py_BuildValue("i", CPythonEventManager::Instance().GetEventSetLocalYPosition(iIndex));

  00027	ff 75 fc	 push	 DWORD PTR _iIndex$[ebp]
  0002a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonEventManager@@@@0PAVCPythonEventManager@@A ; CSingleton<CPythonEventManager>::ms_singleton
  00030	e8 00 00 00 00	 call	 ?GetEventSetLocalYPosition@CPythonEventManager@@QAEHH@Z ; CPythonEventManager::GetEventSetLocalYPosition
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i?$AA@
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00041	83 c4 08	 add	 esp, 8

; 56   : }

  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
?eventGetEventSetLocalYPosition@@YAPAU_object@@PAU1@0@Z ENDP ; eventGetEventSetLocalYPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\metin2\metin2\client_source_clean\client_source_clean\source\userinterface\pythoneventmanagermoudle.cpp
;	COMDAT ?eventAddEventSetLocalYPosition@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_iIndex$ = -8						; size = 4
_iPos$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?eventAddEventSetLocalYPosition@@YAPAU_object@@PAU1@0@Z PROC ; eventAddEventSetLocalYPosition, COMDAT

; 59   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 60   : 	int iIndex;
; 61   : 	if (!PyTuple_GetInteger(poArgs, 0, &iIndex))

  00006	8d 45 f8	 lea	 eax, DWORD PTR _iIndex$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	84 c0		 test	 al, al
  00019	75 0e		 jne	 SHORT $LN2@eventAddEv
$LN7@eventAddEv:

; 62   : 		return Py_BuildException();

  0001b	6a 00		 push	 0
  0001d	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00022	83 c4 04	 add	 esp, 4

; 69   : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
$LN2@eventAddEv:

; 63   : 	int iPos;
; 64   : 	if (!PyTuple_GetInteger(poArgs, 1, &iPos))

  00029	8d 45 fc	 lea	 eax, DWORD PTR _iPos$[ebp]
  0002c	50		 push	 eax
  0002d	6a 01		 push	 1
  0002f	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  00032	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003a	84 c0		 test	 al, al
  0003c	74 dd		 je	 SHORT $LN7@eventAddEv

; 65   : 		return Py_BuildException();
; 66   : 
; 67   : 	CPythonEventManager::Instance().AddEventSetLocalYPosition(iIndex, iPos);

  0003e	ff 75 fc	 push	 DWORD PTR _iPos$[ebp]
  00041	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonEventManager@@@@0PAVCPythonEventManager@@A ; CSingleton<CPythonEventManager>::ms_singleton
  00047	ff 75 f8	 push	 DWORD PTR _iIndex$[ebp]
  0004a	e8 00 00 00 00	 call	 ?AddEventSetLocalYPosition@CPythonEventManager@@QAEXHH@Z ; CPythonEventManager::AddEventSetLocalYPosition

; 68   : 	return Py_BuildNone();

  0004f	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 69   : }

  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
?eventAddEventSetLocalYPosition@@YAPAU_object@@PAU1@0@Z ENDP ; eventAddEventSetLocalYPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\metin2\metin2\client_source_clean\client_source_clean\source\userinterface\pythoneventmanagermoudle.cpp
;	COMDAT ?eventInsertText@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_iIndex$ = -8						; size = 4
_szText$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?eventInsertText@@YAPAU_object@@PAU1@0@Z PROC		; eventInsertText, COMDAT

; 72   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 73   : 	int iIndex;
; 74   : 	if (!PyTuple_GetInteger(poArgs, 0, &iIndex))

  00006	8d 45 f8	 lea	 eax, DWORD PTR _iIndex$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	84 c0		 test	 al, al
  00019	75 0e		 jne	 SHORT $LN2@eventInser

; 75   : 		return Py_BuildException();

  0001b	6a 00		 push	 0
$LN7@eventInser:
  0001d	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00022	83 c4 04	 add	 esp, 4

; 82   : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
$LN2@eventInser:

; 76   : 	char * szText;
; 77   : 	if (!PyTuple_GetString(poArgs, 1, &szText))

  00029	8d 45 fc	 lea	 eax, DWORD PTR _szText$[ebp]
  0002c	50		 push	 eax
  0002d	6a 01		 push	 1
  0002f	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  00032	e8 00 00 00 00	 call	 ?PyTuple_GetString@@YA_NPAU_object@@HPAPAD@Z ; PyTuple_GetString
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH

; 78   : 		return Py_BuildException();

  0003a	6a 00		 push	 0
  0003c	84 c0		 test	 al, al
  0003e	74 dd		 je	 SHORT $LN7@eventInser

; 79   : 
; 80   : 	CPythonEventManager::Instance().InsertText(iIndex, szText);

  00040	ff 75 fc	 push	 DWORD PTR _szText$[ebp]
  00043	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonEventManager@@@@0PAVCPythonEventManager@@A ; CSingleton<CPythonEventManager>::ms_singleton
  00049	ff 75 f8	 push	 DWORD PTR _iIndex$[ebp]
  0004c	e8 00 00 00 00	 call	 ?InsertText@CPythonEventManager@@QAEXHPBDH@Z ; CPythonEventManager::InsertText

; 81   : 	return Py_BuildNone();

  00051	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 82   : }

  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
?eventInsertText@@YAPAU_object@@PAU1@0@Z ENDP		; eventInsertText
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\metin2\metin2\client_source_clean\client_source_clean\source\userinterface\pythoneventmanagermoudle.cpp
;	COMDAT ?eventInsertTextInline@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_iIndex$ = -12						; size = 4
_szText$ = -8						; size = 4
_iXIndex$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?eventInsertTextInline@@YAPAU_object@@PAU1@0@Z PROC	; eventInsertTextInline, COMDAT

; 85   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 86   : 	int iIndex;
; 87   : 	if (!PyTuple_GetInteger(poArgs, 0, &iIndex))

  00006	8d 45 f4	 lea	 eax, DWORD PTR _iIndex$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 0c	 mov	 esi, DWORD PTR _poArgs$[ebp]
  0000d	50		 push	 eax
  0000e	6a 00		 push	 0
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	84 c0		 test	 al, al
  0001b	75 0f		 jne	 SHORT $LN3@eventInser
$LN8@eventInser:

; 88   : 		return Py_BuildException();

  0001d	6a 00		 push	 0
  0001f	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00024	83 c4 04	 add	 esp, 4
  00027	5e		 pop	 esi

; 98   : }

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
$LN3@eventInser:

; 89   : 	char * szText;
; 90   : 	if (!PyTuple_GetString(poArgs, 1, &szText))

  0002c	8d 45 f8	 lea	 eax, DWORD PTR _szText$[ebp]
  0002f	50		 push	 eax
  00030	6a 01		 push	 1
  00032	56		 push	 esi
  00033	e8 00 00 00 00	 call	 ?PyTuple_GetString@@YA_NPAU_object@@HPAPAD@Z ; PyTuple_GetString
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003b	84 c0		 test	 al, al
  0003d	74 de		 je	 SHORT $LN8@eventInser

; 91   : 		return Py_BuildException();
; 92   : 	int iXIndex;
; 93   : 	if (!PyTuple_GetInteger(poArgs, 2, &iXIndex))

  0003f	8d 45 fc	 lea	 eax, DWORD PTR _iXIndex$[ebp]
  00042	50		 push	 eax
  00043	6a 02		 push	 2
  00045	56		 push	 esi
  00046	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004e	84 c0		 test	 al, al
  00050	74 cb		 je	 SHORT $LN8@eventInser

; 94   : 		return Py_BuildException();
; 95   : 
; 96   : 	CPythonEventManager::Instance().InsertText(iIndex, szText,iXIndex);

  00052	ff 75 fc	 push	 DWORD PTR _iXIndex$[ebp]
  00055	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonEventManager@@@@0PAVCPythonEventManager@@A ; CSingleton<CPythonEventManager>::ms_singleton
  0005b	ff 75 f8	 push	 DWORD PTR _szText$[ebp]
  0005e	ff 75 f4	 push	 DWORD PTR _iIndex$[ebp]
  00061	e8 00 00 00 00	 call	 ?InsertText@CPythonEventManager@@QAEXHPBDH@Z ; CPythonEventManager::InsertText

; 97   : 	return Py_BuildNone();

  00066	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone
  0006b	5e		 pop	 esi

; 98   : }

  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
?eventInsertTextInline@@YAPAU_object@@PAU1@0@Z ENDP	; eventInsertTextInline
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\metin2\metin2\client_source_clean\client_source_clean\source\userinterface\pythoneventmanagermoudle.cpp
;	COMDAT ?eventUpdateEventSet@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_iIndex$ = -12						; size = 4
_ix$ = -8						; size = 4
_iy$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?eventUpdateEventSet@@YAPAU_object@@PAU1@0@Z PROC	; eventUpdateEventSet, COMDAT

; 101  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 102  : 	int iIndex;
; 103  : 	if (!PyTuple_GetInteger(poArgs, 0, &iIndex))

  00006	8d 45 f4	 lea	 eax, DWORD PTR _iIndex$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 0c	 mov	 esi, DWORD PTR _poArgs$[ebp]
  0000d	50		 push	 eax
  0000e	6a 00		 push	 0
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	84 c0		 test	 al, al
  0001b	75 0f		 jne	 SHORT $LN3@eventUpdat
$LN8@eventUpdat:

; 104  : 		return Py_BuildException();

  0001d	6a 00		 push	 0
  0001f	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00024	83 c4 04	 add	 esp, 4
  00027	5e		 pop	 esi

; 116  : }

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
$LN3@eventUpdat:

; 105  : 
; 106  : 	int ix;
; 107  : 	if (!PyTuple_GetInteger(poArgs, 1, &ix))

  0002c	8d 45 f8	 lea	 eax, DWORD PTR _ix$[ebp]
  0002f	50		 push	 eax
  00030	6a 01		 push	 1
  00032	56		 push	 esi
  00033	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003b	84 c0		 test	 al, al
  0003d	74 de		 je	 SHORT $LN8@eventUpdat

; 108  : 		return Py_BuildException();
; 109  : 
; 110  : 	int iy;
; 111  : 	if (!PyTuple_GetInteger(poArgs, 2, &iy))

  0003f	8d 45 fc	 lea	 eax, DWORD PTR _iy$[ebp]
  00042	50		 push	 eax
  00043	6a 02		 push	 2
  00045	56		 push	 esi
  00046	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004e	84 c0		 test	 al, al
  00050	74 cb		 je	 SHORT $LN8@eventUpdat

; 112  : 		return Py_BuildException();
; 113  : 
; 114  : 	CPythonEventManager::Instance().UpdateEventSet(iIndex, ix, -iy);

  00052	8b 45 fc	 mov	 eax, DWORD PTR _iy$[ebp]
  00055	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonEventManager@@@@0PAVCPythonEventManager@@A ; CSingleton<CPythonEventManager>::ms_singleton
  0005b	f7 d8		 neg	 eax
  0005d	50		 push	 eax
  0005e	ff 75 f8	 push	 DWORD PTR _ix$[ebp]
  00061	ff 75 f4	 push	 DWORD PTR _iIndex$[ebp]
  00064	e8 00 00 00 00	 call	 ?UpdateEventSet@CPythonEventManager@@QAEXHHH@Z ; CPythonEventManager::UpdateEventSet

; 115  : 	return Py_BuildNone();

  00069	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone
  0006e	5e		 pop	 esi

; 116  : }

  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
?eventUpdateEventSet@@YAPAU_object@@PAU1@0@Z ENDP	; eventUpdateEventSet
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\metin2\metin2\client_source_clean\client_source_clean\source\userinterface\pythoneventmanagermoudle.cpp
;	COMDAT ?eventRenderEventSet@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_iIndex$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?eventRenderEventSet@@YAPAU_object@@PAU1@0@Z PROC	; eventRenderEventSet, COMDAT

; 119  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 120  : 	int iIndex;
; 121  : 	if (!PyTuple_GetInteger(poArgs, 0, &iIndex))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _iIndex$[ebp]
  00007	50		 push	 eax
  00008	6a 00		 push	 0
  0000a	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000d	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	84 c0		 test	 al, al
  00017	75 0e		 jne	 SHORT $LN1@eventRende

; 122  : 		return Py_BuildException();

  00019	6a 00		 push	 0
  0001b	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00020	83 c4 04	 add	 esp, 4

; 126  : }

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
$LN1@eventRende:

; 123  : 
; 124  : 	CPythonEventManager::Instance().RenderEventSet(iIndex);

  00027	ff 75 fc	 push	 DWORD PTR _iIndex$[ebp]
  0002a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonEventManager@@@@0PAVCPythonEventManager@@A ; CSingleton<CPythonEventManager>::ms_singleton
  00030	e8 00 00 00 00	 call	 ?RenderEventSet@CPythonEventManager@@QAEXH@Z ; CPythonEventManager::RenderEventSet

; 125  : 	return Py_BuildNone();

  00035	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 126  : }

  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?eventRenderEventSet@@YAPAU_object@@PAU1@0@Z ENDP	; eventRenderEventSet
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\metin2\metin2\client_source_clean\client_source_clean\source\userinterface\pythoneventmanagermoudle.cpp
;	COMDAT ?eventSetEventSetWidth@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_iIndex$ = -8						; size = 4
_iWidth$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?eventSetEventSetWidth@@YAPAU_object@@PAU1@0@Z PROC	; eventSetEventSetWidth, COMDAT

; 129  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 130  : 	int iIndex;
; 131  : 	if (!PyTuple_GetInteger(poArgs, 0, &iIndex))

  00006	8d 45 f8	 lea	 eax, DWORD PTR _iIndex$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	84 c0		 test	 al, al
  00019	75 0e		 jne	 SHORT $LN2@eventSetEv
$LN7@eventSetEv:

; 132  : 		return Py_BuildException();

  0001b	6a 00		 push	 0
  0001d	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00022	83 c4 04	 add	 esp, 4

; 139  : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
$LN2@eventSetEv:

; 133  : 	int iWidth;
; 134  : 	if (!PyTuple_GetInteger(poArgs, 1, &iWidth))

  00029	8d 45 fc	 lea	 eax, DWORD PTR _iWidth$[ebp]
  0002c	50		 push	 eax
  0002d	6a 01		 push	 1
  0002f	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  00032	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003a	84 c0		 test	 al, al
  0003c	74 dd		 je	 SHORT $LN7@eventSetEv

; 135  : 		return Py_BuildException();
; 136  : 
; 137  : 	CPythonEventManager::Instance().SetEventSetWidth(iIndex, iWidth);

  0003e	ff 75 fc	 push	 DWORD PTR _iWidth$[ebp]
  00041	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonEventManager@@@@0PAVCPythonEventManager@@A ; CSingleton<CPythonEventManager>::ms_singleton
  00047	ff 75 f8	 push	 DWORD PTR _iIndex$[ebp]
  0004a	e8 00 00 00 00	 call	 ?SetEventSetWidth@CPythonEventManager@@QAEXHH@Z ; CPythonEventManager::SetEventSetWidth

; 138  : 	return Py_BuildNone();

  0004f	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 139  : }

  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
?eventSetEventSetWidth@@YAPAU_object@@PAU1@0@Z ENDP	; eventSetEventSetWidth
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\metin2\metin2\client_source_clean\client_source_clean\source\userinterface\pythoneventmanagermoudle.cpp
;	COMDAT ?eventSkip@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_iIndex$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?eventSkip@@YAPAU_object@@PAU1@0@Z PROC			; eventSkip, COMDAT

; 142  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 143  : 	int iIndex;
; 144  : 	if (!PyTuple_GetInteger(poArgs, 0, &iIndex))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _iIndex$[ebp]
  00007	50		 push	 eax
  00008	6a 00		 push	 0
  0000a	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000d	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	84 c0		 test	 al, al
  00017	75 0e		 jne	 SHORT $LN1@eventSkip

; 145  : 		return Py_BuildException();

  00019	6a 00		 push	 0
  0001b	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00020	83 c4 04	 add	 esp, 4

; 149  : }

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
$LN1@eventSkip:

; 146  : 
; 147  : 	CPythonEventManager::Instance().Skip(iIndex);

  00027	ff 75 fc	 push	 DWORD PTR _iIndex$[ebp]
  0002a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonEventManager@@@@0PAVCPythonEventManager@@A ; CSingleton<CPythonEventManager>::ms_singleton
  00030	e8 00 00 00 00	 call	 ?Skip@CPythonEventManager@@QAEXH@Z ; CPythonEventManager::Skip

; 148  : 	return Py_BuildNone();

  00035	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 149  : }

  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?eventSkip@@YAPAU_object@@PAU1@0@Z ENDP			; eventSkip
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\metin2\metin2\client_source_clean\client_source_clean\source\userinterface\pythoneventmanagermoudle.cpp
;	COMDAT ?eventIsWait@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_iIndex$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?eventIsWait@@YAPAU_object@@PAU1@0@Z PROC		; eventIsWait, COMDAT

; 152  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 153  : 	int iIndex;
; 154  : 	if (!PyTuple_GetInteger(poArgs, 0, &iIndex))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _iIndex$[ebp]
  00007	50		 push	 eax
  00008	6a 00		 push	 0
  0000a	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000d	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	84 c0		 test	 al, al
  00017	75 0e		 jne	 SHORT $LN1@eventIsWai

; 155  : 		return Py_BuildException();

  00019	6a 00		 push	 0
  0001b	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00020	83 c4 04	 add	 esp, 4

; 158  : }

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
$LN1@eventIsWai:

; 156  : 
; 157  : 	return Py_BuildValue("i", CPythonEventManager::Instance().IsWait(iIndex) == true ? 1 : 0);

  00027	ff 75 fc	 push	 DWORD PTR _iIndex$[ebp]
  0002a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonEventManager@@@@0PAVCPythonEventManager@@A ; CSingleton<CPythonEventManager>::ms_singleton
  00030	e8 00 00 00 00	 call	 ?IsWait@CPythonEventManager@@QAE_NH@Z ; CPythonEventManager::IsWait
  00035	33 c9		 xor	 ecx, ecx
  00037	3c 01		 cmp	 al, 1
  00039	0f 94 c1	 sete	 cl
  0003c	51		 push	 ecx
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i?$AA@
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00048	83 c4 08	 add	 esp, 8

; 158  : }

  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
?eventIsWait@@YAPAU_object@@PAU1@0@Z ENDP		; eventIsWait
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\metin2\metin2\client_source_clean\client_source_clean\source\userinterface\pythoneventmanagermoudle.cpp
;	COMDAT ?eventEndEventProcess@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_iIndex$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?eventEndEventProcess@@YAPAU_object@@PAU1@0@Z PROC	; eventEndEventProcess, COMDAT

; 161  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 162  : 	int iIndex;
; 163  : 	if (!PyTuple_GetInteger(poArgs, 0, &iIndex))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _iIndex$[ebp]
  00007	50		 push	 eax
  00008	6a 00		 push	 0
  0000a	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000d	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	84 c0		 test	 al, al
  00017	75 0e		 jne	 SHORT $LN1@eventEndEv

; 164  : 		return Py_BuildException();

  00019	6a 00		 push	 0
  0001b	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00020	83 c4 04	 add	 esp, 4

; 169  : }

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
$LN1@eventEndEv:

; 165  : 
; 166  : 	CPythonEventManager::Instance().EndEventProcess(iIndex);

  00027	ff 75 fc	 push	 DWORD PTR _iIndex$[ebp]
  0002a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonEventManager@@@@0PAVCPythonEventManager@@A ; CSingleton<CPythonEventManager>::ms_singleton
  00030	e8 00 00 00 00	 call	 ?EndEventProcess@CPythonEventManager@@QAEXH@Z ; CPythonEventManager::EndEventProcess

; 167  : 
; 168  : 	return Py_BuildNone();

  00035	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 169  : }

  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?eventEndEventProcess@@YAPAU_object@@PAU1@0@Z ENDP	; eventEndEventProcess
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\metin2\metin2\client_source_clean\client_source_clean\source\userinterface\pythoneventmanagermoudle.cpp
;	COMDAT ?eventSetEventHandler@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_iIndex$ = -8						; size = 4
_poEventHandler$ = -4					; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?eventSetEventHandler@@YAPAU_object@@PAU1@0@Z PROC	; eventSetEventHandler, COMDAT

; 172  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 173  : 	int iIndex;
; 174  : 	if (!PyTuple_GetInteger(poArgs, 0, &iIndex))

  00006	8d 45 f8	 lea	 eax, DWORD PTR _iIndex$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	84 c0		 test	 al, al
  00019	75 0e		 jne	 SHORT $LN2@eventSetEv
$LN7@eventSetEv:

; 175  : 		return Py_BuildException();

  0001b	6a 00		 push	 0
  0001d	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00022	83 c4 04	 add	 esp, 4

; 183  : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
$LN2@eventSetEv:

; 176  : 
; 177  : 	PyObject * poEventHandler;
; 178  : 	if (!PyTuple_GetObject(poArgs, 1, &poEventHandler))

  00029	8d 45 fc	 lea	 eax, DWORD PTR _poEventHandler$[ebp]
  0002c	50		 push	 eax
  0002d	6a 01		 push	 1
  0002f	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  00032	e8 00 00 00 00	 call	 ?PyTuple_GetObject@@YA_NPAU_object@@HPAPAU1@@Z ; PyTuple_GetObject
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003a	84 c0		 test	 al, al
  0003c	74 dd		 je	 SHORT $LN7@eventSetEv

; 179  : 		return Py_BuildException();
; 180  : 
; 181  : 	CPythonEventManager::Instance().SetEventHandler(iIndex, poEventHandler);

  0003e	ff 75 fc	 push	 DWORD PTR _poEventHandler$[ebp]
  00041	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonEventManager@@@@0PAVCPythonEventManager@@A ; CSingleton<CPythonEventManager>::ms_singleton
  00047	ff 75 f8	 push	 DWORD PTR _iIndex$[ebp]
  0004a	e8 00 00 00 00	 call	 ?SetEventHandler@CPythonEventManager@@QAEXHPAU_object@@@Z ; CPythonEventManager::SetEventHandler

; 182  : 	return Py_BuildNone();

  0004f	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 183  : }

  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
?eventSetEventHandler@@YAPAU_object@@PAU1@0@Z ENDP	; eventSetEventHandler
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\metin2\metin2\client_source_clean\client_source_clean\source\userinterface\pythoneventmanagermoudle.cpp
;	COMDAT ?eventSelectAnswer@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_iIndex$ = -8						; size = 4
_iAnswer$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?eventSelectAnswer@@YAPAU_object@@PAU1@0@Z PROC		; eventSelectAnswer, COMDAT

; 186  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 187  : 	int iIndex;
; 188  : 	if (!PyTuple_GetInteger(poArgs, 0, &iIndex))

  00006	8d 45 f8	 lea	 eax, DWORD PTR _iIndex$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	84 c0		 test	 al, al
  00019	75 0e		 jne	 SHORT $LN2@eventSelec
$LN7@eventSelec:

; 189  : 		return Py_BuildException();

  0001b	6a 00		 push	 0
  0001d	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00022	83 c4 04	 add	 esp, 4

; 197  : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
$LN2@eventSelec:

; 190  : 
; 191  : 	int iAnswer;
; 192  : 	if (!PyTuple_GetInteger(poArgs, 1, &iAnswer))

  00029	8d 45 fc	 lea	 eax, DWORD PTR _iAnswer$[ebp]
  0002c	50		 push	 eax
  0002d	6a 01		 push	 1
  0002f	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  00032	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003a	84 c0		 test	 al, al
  0003c	74 dd		 je	 SHORT $LN7@eventSelec

; 193  : 		return Py_BuildException();
; 194  : 
; 195  : 	CPythonEventManager::Instance().SelectAnswer(iIndex, iAnswer);

  0003e	ff 75 fc	 push	 DWORD PTR _iAnswer$[ebp]
  00041	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonEventManager@@@@0PAVCPythonEventManager@@A ; CSingleton<CPythonEventManager>::ms_singleton
  00047	ff 75 f8	 push	 DWORD PTR _iIndex$[ebp]
  0004a	e8 00 00 00 00	 call	 ?SelectAnswer@CPythonEventManager@@QAEXHH@Z ; CPythonEventManager::SelectAnswer

; 196  : 	return Py_BuildNone();

  0004f	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 197  : }

  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
?eventSelectAnswer@@YAPAU_object@@PAU1@0@Z ENDP		; eventSelectAnswer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\metin2\metin2\client_source_clean\client_source_clean\source\userinterface\pythoneventmanagermoudle.cpp
;	COMDAT ?eventGetLineCount@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_iIndex$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?eventGetLineCount@@YAPAU_object@@PAU1@0@Z PROC		; eventGetLineCount, COMDAT

; 200  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 201  : 	int iIndex;
; 202  : 	if (!PyTuple_GetInteger(poArgs, 0, &iIndex))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _iIndex$[ebp]
  00007	50		 push	 eax
  00008	6a 00		 push	 0
  0000a	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000d	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	84 c0		 test	 al, al
  00017	75 0e		 jne	 SHORT $LN1@eventGetLi

; 203  : 		return Py_BuildException();

  00019	6a 00		 push	 0
  0001b	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00020	83 c4 04	 add	 esp, 4

; 207  : }

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
$LN1@eventGetLi:

; 204  : 
; 205  : 	int iLineCount = CPythonEventManager::Instance().GetLineCount(iIndex);

  00027	ff 75 fc	 push	 DWORD PTR _iIndex$[ebp]
  0002a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonEventManager@@@@0PAVCPythonEventManager@@A ; CSingleton<CPythonEventManager>::ms_singleton
  00030	e8 00 00 00 00	 call	 ?GetLineCount@CPythonEventManager@@QAEHH@Z ; CPythonEventManager::GetLineCount

; 206  : 	return Py_BuildValue("i", iLineCount);

  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i?$AA@
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00041	83 c4 08	 add	 esp, 8

; 207  : }

  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
?eventGetLineCount@@YAPAU_object@@PAU1@0@Z ENDP		; eventGetLineCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\metin2\metin2\client_source_clean\client_source_clean\source\userinterface\pythoneventmanagermoudle.cpp
;	COMDAT ?eventSetVisibleStartLine@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_iIndex$ = -8						; size = 4
_iStartLine$ = -4					; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?eventSetVisibleStartLine@@YAPAU_object@@PAU1@0@Z PROC	; eventSetVisibleStartLine, COMDAT

; 210  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 211  : 	int iIndex;
; 212  : 	if (!PyTuple_GetInteger(poArgs, 0, &iIndex))

  00006	8d 45 f8	 lea	 eax, DWORD PTR _iIndex$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	84 c0		 test	 al, al
  00019	75 0e		 jne	 SHORT $LN2@eventSetVi
$LN7@eventSetVi:

; 213  : 		return Py_BuildException();

  0001b	6a 00		 push	 0
  0001d	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00022	83 c4 04	 add	 esp, 4

; 221  : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
$LN2@eventSetVi:

; 214  : 
; 215  : 	int iStartLine;
; 216  : 	if (!PyTuple_GetInteger(poArgs, 1, &iStartLine))

  00029	8d 45 fc	 lea	 eax, DWORD PTR _iStartLine$[ebp]
  0002c	50		 push	 eax
  0002d	6a 01		 push	 1
  0002f	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  00032	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003a	84 c0		 test	 al, al
  0003c	74 dd		 je	 SHORT $LN7@eventSetVi

; 217  : 		return Py_BuildException();
; 218  : 
; 219  : 	CPythonEventManager::Instance().SetVisibleStartLine(iIndex, iStartLine);

  0003e	ff 75 fc	 push	 DWORD PTR _iStartLine$[ebp]
  00041	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonEventManager@@@@0PAVCPythonEventManager@@A ; CSingleton<CPythonEventManager>::ms_singleton
  00047	ff 75 f8	 push	 DWORD PTR _iIndex$[ebp]
  0004a	e8 00 00 00 00	 call	 ?SetVisibleStartLine@CPythonEventManager@@QAEXHH@Z ; CPythonEventManager::SetVisibleStartLine

; 220  : 	return Py_BuildNone();

  0004f	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 221  : }

  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
?eventSetVisibleStartLine@@YAPAU_object@@PAU1@0@Z ENDP	; eventSetVisibleStartLine
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\metin2\metin2\client_source_clean\client_source_clean\source\userinterface\pythoneventmanagermoudle.cpp
;	COMDAT ?eventGetVisibleStartLine@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_iIndex$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?eventGetVisibleStartLine@@YAPAU_object@@PAU1@0@Z PROC	; eventGetVisibleStartLine, COMDAT

; 224  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 225  : 	int iIndex;
; 226  : 	if (!PyTuple_GetInteger(poArgs, 0, &iIndex))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _iIndex$[ebp]
  00007	50		 push	 eax
  00008	6a 00		 push	 0
  0000a	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000d	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	84 c0		 test	 al, al
  00017	75 0e		 jne	 SHORT $LN1@eventGetVi

; 227  : 		return Py_BuildException();

  00019	6a 00		 push	 0
  0001b	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00020	83 c4 04	 add	 esp, 4

; 230  : }

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
$LN1@eventGetVi:

; 228  : 
; 229  : 	return Py_BuildValue("i", CPythonEventManager::Instance().GetVisibleStartLine(iIndex));

  00027	ff 75 fc	 push	 DWORD PTR _iIndex$[ebp]
  0002a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonEventManager@@@@0PAVCPythonEventManager@@A ; CSingleton<CPythonEventManager>::ms_singleton
  00030	e8 00 00 00 00	 call	 ?GetVisibleStartLine@CPythonEventManager@@QAEHH@Z ; CPythonEventManager::GetVisibleStartLine
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i?$AA@
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00041	83 c4 08	 add	 esp, 8

; 230  : }

  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
?eventGetVisibleStartLine@@YAPAU_object@@PAU1@0@Z ENDP	; eventGetVisibleStartLine
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\metin2\metin2\client_source_clean\client_source_clean\source\userinterface\pythoneventmanagermoudle.cpp
;	COMDAT ?eventQuestButtonClick@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_iIndex$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?eventQuestButtonClick@@YAPAU_object@@PAU1@0@Z PROC	; eventQuestButtonClick, COMDAT

; 233  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 234  : 	int iIndex;
; 235  : 	if (!PyTuple_GetInteger(poArgs, 0, &iIndex))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _iIndex$[ebp]
  00007	50		 push	 eax
  00008	6a 00		 push	 0
  0000a	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000d	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	84 c0		 test	 al, al
  00017	75 0e		 jne	 SHORT $LN1@eventQuest

; 236  : 		return Py_BuildException();

  00019	6a 00		 push	 0
  0001b	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00020	83 c4 04	 add	 esp, 4

; 241  : }

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
$LN1@eventQuest:

; 237  : 	
; 238  : 	CPythonNetworkStream::Instance().SendScriptButtonPacket(iIndex);

  00027	ff 75 fc	 push	 DWORD PTR _iIndex$[ebp]
  0002a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonNetworkStream@@@@0PAVCPythonNetworkStream@@A ; CSingleton<CPythonNetworkStream>::ms_singleton
  00030	e8 00 00 00 00	 call	 ?SendScriptButtonPacket@CPythonNetworkStream@@QAE_NI@Z ; CPythonNetworkStream::SendScriptButtonPacket

; 239  : 
; 240  : 	return Py_BuildNone();

  00035	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 241  : }

  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?eventQuestButtonClick@@YAPAU_object@@PAU1@0@Z ENDP	; eventQuestButtonClick
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\metin2\metin2\client_source_clean\client_source_clean\source\userinterface\pythoneventmanagermoudle.cpp
;	COMDAT ?eventSetInterfaceWindow@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pyHandle$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?eventSetInterfaceWindow@@YAPAU_object@@PAU1@0@Z PROC	; eventSetInterfaceWindow, COMDAT

; 244  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 245  : 	PyObject * pyHandle;
; 246  : 	if (!PyTuple_GetObject(poArgs, 0, &pyHandle))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _pyHandle$[ebp]
  00007	50		 push	 eax
  00008	6a 00		 push	 0
  0000a	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000d	e8 00 00 00 00	 call	 ?PyTuple_GetObject@@YA_NPAU_object@@HPAPAU1@@Z ; PyTuple_GetObject
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	84 c0		 test	 al, al
  00017	75 09		 jne	 SHORT $LN1@eventSetIn

; 247  : 		return Py_BadArgument();

  00019	e8 00 00 00 00	 call	 ?Py_BadArgument@@YAPAU_object@@XZ ; Py_BadArgument

; 252  : }

  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
$LN1@eventSetIn:

; 248  : 	
; 249  : 	CPythonEventManager & rpem = CPythonEventManager::Instance();
; 250  : 	rpem.SetInterfaceWindow(pyHandle);

  00022	ff 75 fc	 push	 DWORD PTR _pyHandle$[ebp]
  00025	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonEventManager@@@@0PAVCPythonEventManager@@A ; CSingleton<CPythonEventManager>::ms_singleton
  0002b	e8 00 00 00 00	 call	 ?SetInterfaceWindow@CPythonEventManager@@QAEXPAU_object@@@Z ; CPythonEventManager::SetInterfaceWindow

; 251  : 	return Py_BuildNone();	

  00030	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 252  : }

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?eventSetInterfaceWindow@@YAPAU_object@@PAU1@0@Z ENDP	; eventSetInterfaceWindow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\metin2\metin2\client_source_clean\client_source_clean\source\userinterface\pythoneventmanagermoudle.cpp
;	COMDAT ?eventSetLeftTimeString@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_szText$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?eventSetLeftTimeString@@YAPAU_object@@PAU1@0@Z PROC	; eventSetLeftTimeString, COMDAT

; 255  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 256  : 	char * szText;
; 257  : 	if (!PyTuple_GetString(poArgs, 0, &szText))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _szText$[ebp]
  00007	50		 push	 eax
  00008	6a 00		 push	 0
  0000a	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000d	e8 00 00 00 00	 call	 ?PyTuple_GetString@@YA_NPAU_object@@HPAPAD@Z ; PyTuple_GetString
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	84 c0		 test	 al, al
  00017	75 0e		 jne	 SHORT $LN1@eventSetLe

; 258  : 		return Py_BuildException();

  00019	6a 00		 push	 0
  0001b	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00020	83 c4 04	 add	 esp, 4

; 263  : }

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
$LN1@eventSetLe:

; 259  : 
; 260  : 	CPythonEventManager & rpem = CPythonEventManager::Instance();
; 261  : 	rpem.SetLeftTimeString(szText);

  00027	ff 75 fc	 push	 DWORD PTR _szText$[ebp]
  0002a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonEventManager@@@@0PAVCPythonEventManager@@A ; CSingleton<CPythonEventManager>::ms_singleton
  00030	e8 00 00 00 00	 call	 ?SetLeftTimeString@CPythonEventManager@@QAEXPBD@Z ; CPythonEventManager::SetLeftTimeString

; 262  : 	return Py_BuildNone();

  00035	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 263  : }

  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?eventSetLeftTimeString@@YAPAU_object@@PAU1@0@Z ENDP	; eventSetLeftTimeString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\metin2\metin2\client_source_clean\client_source_clean\source\userinterface\pythoneventmanagermoudle.cpp
;	COMDAT ?eventDestroy@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?eventDestroy@@YAPAU_object@@PAU1@0@Z PROC		; eventDestroy, COMDAT

; 267  : 	CPythonEventManager & rpem = CPythonEventManager::Instance();
; 268  : 	rpem.Destroy();

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonEventManager@@@@0PAVCPythonEventManager@@A ; CSingleton<CPythonEventManager>::ms_singleton
  00006	e8 00 00 00 00	 call	 ?Destroy@CPythonEventManager@@QAEXXZ ; CPythonEventManager::Destroy

; 269  : 	return Py_BuildNone();

  0000b	e9 00 00 00 00	 jmp	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone
?eventDestroy@@YAPAU_object@@PAU1@0@Z ENDP		; eventDestroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\metin2\metin2\client_source_clean\client_source_clean\source\userinterface\pythoneventmanagermoudle.cpp
;	COMDAT ?initEvent@@YAXXZ
_TEXT	SEGMENT
?initEvent@@YAXXZ PROC					; initEvent, COMDAT

; 273  : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 274  : 	static PyMethodDef s_methods[] =
; 275  : 	{
; 276  : 		{ "RegisterEventSet",			eventRegisterEventSet,				METH_VARARGS },
; 277  : 		{ "RegisterEventSetFromString",	eventRegisterEventSetFromString,	METH_VARARGS },
; 278  : 		{ "ClearEventSet",				eventClearEventSet,					METH_VARARGS },
; 279  : 
; 280  : 		{ "SetRestrictedCount",			eventSetRestrictedCount,			METH_VARARGS },
; 281  : 
; 282  : 		{ "GetEventSetLocalYPosition",	eventGetEventSetLocalYPosition,		METH_VARARGS },
; 283  : 		{ "AddEventSetLocalYPosition",	eventAddEventSetLocalYPosition,		METH_VARARGS },
; 284  : 		{ "InsertText",					eventInsertText,					METH_VARARGS },
; 285  : 		{ "InsertTextInline",			eventInsertTextInline,				METH_VARARGS },
; 286  : 
; 287  : 		{ "UpdateEventSet",				eventUpdateEventSet,				METH_VARARGS },
; 288  : 		{ "RenderEventSet",				eventRenderEventSet,				METH_VARARGS },
; 289  : 		{ "SetEventSetWidth",			eventSetEventSetWidth,				METH_VARARGS },
; 290  : 
; 291  : 		{ "Skip",						eventSkip,							METH_VARARGS },
; 292  : 		{ "IsWait",						eventIsWait,						METH_VARARGS },
; 293  : 		{ "EndEventProcess",			eventEndEventProcess,				METH_VARARGS },
; 294  : 
; 295  : 		{ "SelectAnswer",				eventSelectAnswer,					METH_VARARGS },
; 296  : 		{ "GetLineCount",				eventGetLineCount,					METH_VARARGS },
; 297  : 		{ "SetVisibleStartLine",		eventSetVisibleStartLine,			METH_VARARGS },
; 298  : 		{ "GetVisibleStartLine",		eventGetVisibleStartLine,			METH_VARARGS },
; 299  : 
; 300  : 		{ "SetEventHandler",			eventSetEventHandler,				METH_VARARGS },
; 301  : 		{ "SetInterfaceWindow",			eventSetInterfaceWindow,			METH_VARARGS },
; 302  : 		{ "SetLeftTimeString",			eventSetLeftTimeString,				METH_VARARGS },
; 303  : 
; 304  : 		{ "QuestButtonClick",			eventQuestButtonClick,				METH_VARARGS },
; 305  : 		{ "Destroy",					eventDestroy,						METH_VARARGS },
; 306  : 		{ NULL,							NULL,								NULL         },
; 307  : 	};
; 308  : 
; 309  : 	PyObject * poModule = Py_InitModule("event", s_methods);

  00002	68 f5 03 00 00	 push	 1013			; 000003f5H
  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	68 00 00 00 00	 push	 OFFSET ?s_methods@?1??initEvent@@YAXXZ@4PAUPyMethodDef@@A
  00010	68 00 00 00 00	 push	 OFFSET ??_C@_05GFHEIIDD@event?$AA@
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_InitModule4

; 310  : 
; 311  : 	PyModule_AddIntConstant(poModule, "BOX_VISIBLE_LINE_COUNT", CPythonEventManager::BOX_VISIBLE_LINE_COUNT);

  0001b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__PyModule_AddIntConstant
  00021	8b f8		 mov	 edi, eax
  00023	6a 05		 push	 5
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@NLEPPNKM@BOX_VISIBLE_LINE_COUNT?$AA@
  0002a	57		 push	 edi
  0002b	ff d6		 call	 esi

; 312  : 	PyModule_AddIntConstant(poModule, "BUTTON_TYPE_NEXT", CPythonEventManager::BUTTON_TYPE_NEXT);

  0002d	6a 00		 push	 0
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@LIHDEJBM@BUTTON_TYPE_NEXT?$AA@
  00034	57		 push	 edi
  00035	ff d6		 call	 esi

; 313  : 	PyModule_AddIntConstant(poModule, "BUTTON_TYPE_DONE", CPythonEventManager::BUTTON_TYPE_DONE);

  00037	6a 01		 push	 1
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@NGAMENAL@BUTTON_TYPE_DONE?$AA@
  0003e	57		 push	 edi
  0003f	ff d6		 call	 esi

; 314  : 	PyModule_AddIntConstant(poModule, "BUTTON_TYPE_CANCEL", CPythonEventManager::BUTTON_TYPE_CANCEL);

  00041	6a 02		 push	 2
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@BLMCHNOK@BUTTON_TYPE_CANCEL?$AA@
  00048	57		 push	 edi
  00049	ff d6		 call	 esi
  0004b	83 c4 44	 add	 esp, 68			; 00000044H
  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi

; 315  : }

  00050	c3		 ret	 0
?initEvent@@YAXXZ ENDP					; initEvent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\metin2\metin2\client_source_clean\client_source_clean\source\eterbase\singleton.h
;	COMDAT ?Instance@?$CSingleton@VCPythonEventManager@@@@SAAAVCPythonEventManager@@XZ
_TEXT	SEGMENT
?Instance@?$CSingleton@VCPythonEventManager@@@@SAAAVCPythonEventManager@@XZ PROC ; CSingleton<CPythonEventManager>::Instance, COMDAT

; 26   : 		assert(ms_singleton);
; 27   : 		return (*ms_singleton);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonEventManager@@@@0PAVCPythonEventManager@@A ; CSingleton<CPythonEventManager>::ms_singleton

; 28   : 	}

  00005	c3		 ret	 0
?Instance@?$CSingleton@VCPythonEventManager@@@@SAAAVCPythonEventManager@@XZ ENDP ; CSingleton<CPythonEventManager>::Instance
_TEXT	ENDS
END
